;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((?<dir>[\-ld])(?<permission>([\-r][\-w][\-xs]){3})\s+(?<filecode>\d+)\s+(?<owner>\w+)\s+(?<group>\w+)\s+(?<size>\d+)\s+(?<timestamp>(?<month>[a-z|A-Z]{3})\s+(?<day>(\d?\d))\s+(?<hour>\d?\d):(?<minute>\d{2}))\s+(?<name>\w.+))$
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "-r-xrw-r--\xC 99\u00A0\xD 9\u00AA\u0085\u00E996\u00858\xAvKk 1 8:18\x9  \u00D9\u00DE["
(define-fun Witness1 () String (seq.++ "-" (seq.++ "r" (seq.++ "-" (seq.++ "x" (seq.++ "r" (seq.++ "w" (seq.++ "-" (seq.++ "r" (seq.++ "-" (seq.++ "-" (seq.++ "\x0c" (seq.++ " " (seq.++ "9" (seq.++ "9" (seq.++ "\xa0" (seq.++ "\x0d" (seq.++ " " (seq.++ "9" (seq.++ "\xaa" (seq.++ "\x85" (seq.++ "\xe9" (seq.++ "9" (seq.++ "6" (seq.++ "\x85" (seq.++ "8" (seq.++ "\x0a" (seq.++ "v" (seq.++ "K" (seq.++ "k" (seq.++ " " (seq.++ "1" (seq.++ " " (seq.++ "8" (seq.++ ":" (seq.++ "1" (seq.++ "8" (seq.++ "\x09" (seq.++ " " (seq.++ " " (seq.++ "\xd9" (seq.++ "\xde" (seq.++ "[" "")))))))))))))))))))))))))))))))))))))))))))
;witness2: "-r-x--xrw-\xC\u008568 \u008584\u00A0\u0085\u0085\u00E79\u008554\u00A0wAp\u0085\u00A01\u00A08:87\u00A0\u0085Hu5"
(define-fun Witness2 () String (seq.++ "-" (seq.++ "r" (seq.++ "-" (seq.++ "x" (seq.++ "-" (seq.++ "-" (seq.++ "x" (seq.++ "r" (seq.++ "w" (seq.++ "-" (seq.++ "\x0c" (seq.++ "\x85" (seq.++ "6" (seq.++ "8" (seq.++ " " (seq.++ "\x85" (seq.++ "8" (seq.++ "4" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "\x85" (seq.++ "\xe7" (seq.++ "9" (seq.++ "\x85" (seq.++ "5" (seq.++ "4" (seq.++ "\xa0" (seq.++ "w" (seq.++ "A" (seq.++ "p" (seq.++ "\x85" (seq.++ "\xa0" (seq.++ "1" (seq.++ "\xa0" (seq.++ "8" (seq.++ ":" (seq.++ "8" (seq.++ "7" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "H" (seq.++ "u" (seq.++ "5" ""))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "-" "-")(re.union (re.range "d" "d") (re.range "l" "l")))(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.range "-" "-") (re.range "r" "r"))(re.++ (re.union (re.range "-" "-") (re.range "w" "w")) (re.union (re.range "-" "-")(re.union (re.range "s" "s") (re.range "x" "x"))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.range "0" "9"))))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))) (re.+ (re.union (re.range "\x00" "\x09") (re.range "\x0b" "\xff"))))))))))))))))) (str.to_re "")))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
