;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((?<dir>[\-ld])(?<permission>([\-r][\-w][\-xs]){3})\s+(?<filecode>\d+)\s+(?<owner>\w+)\s+(?<group>\w+)\s+(?<size>\d+)\s+(?<timestamp>(?<month>[a-z|A-Z]{3})\s+(?<day>(\d?\d))\s+(?<hour>\d?\d):(?<minute>\d{2}))\s+(?<name>\w.+))$
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "-r-xrw-r--\xC 99\u00A0\xD 9\u00AA\u0085\u00E996\u00858\xAvKk 1 8:18\x9  \u00D9\u00DE["
(define-fun Witness1 () String (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "x" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "-" (str.++ "\u{0c}" (str.++ " " (str.++ "9" (str.++ "9" (str.++ "\u{a0}" (str.++ "\u{0d}" (str.++ " " (str.++ "9" (str.++ "\u{aa}" (str.++ "\u{85}" (str.++ "\u{e9}" (str.++ "9" (str.++ "6" (str.++ "\u{85}" (str.++ "8" (str.++ "\u{0a}" (str.++ "v" (str.++ "K" (str.++ "k" (str.++ " " (str.++ "1" (str.++ " " (str.++ "8" (str.++ ":" (str.++ "1" (str.++ "8" (str.++ "\u{09}" (str.++ " " (str.++ " " (str.++ "\u{d9}" (str.++ "\u{de}" (str.++ "[" "")))))))))))))))))))))))))))))))))))))))))))
;witness2: "-r-x--xrw-\xC\u008568 \u008584\u00A0\u0085\u0085\u00E79\u008554\u00A0wAp\u0085\u00A01\u00A08:87\u00A0\u0085Hu5"
(define-fun Witness2 () String (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "x" (str.++ "-" (str.++ "-" (str.++ "x" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "6" (str.++ "8" (str.++ " " (str.++ "\u{85}" (str.++ "8" (str.++ "4" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "\u{e7}" (str.++ "9" (str.++ "\u{85}" (str.++ "5" (str.++ "4" (str.++ "\u{a0}" (str.++ "w" (str.++ "A" (str.++ "p" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "1" (str.++ "\u{a0}" (str.++ "8" (str.++ ":" (str.++ "8" (str.++ "7" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "H" (str.++ "u" (str.++ "5" ""))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "-" "-")(re.union (re.range "d" "d") (re.range "l" "l")))(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.range "-" "-") (re.range "r" "r"))(re.++ (re.union (re.range "-" "-") (re.range "w" "w")) (re.union (re.range "-" "-")(re.union (re.range "s" "s") (re.range "x" "x"))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 3 3) (re.union (re.range "A" "Z")(re.union (re.range "a" "z") (re.range "|" "|"))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.range "0" "9"))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))))))))) (str.to_re "")))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
