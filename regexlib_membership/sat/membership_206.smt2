;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (?<O>(?<d>[BEGLMNS]|A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)(?<a>\d\d?)|(?<d>E)(?<a>\dW)|(?<d>EC)(?<a>\d[AMNPRVY0])|(?<d>N)(?<a>\dP)|(?<d>NW)(?<a>\dW)|(?<d>SE)(?<a>\dP)|(?<d>SW)(?<a>\d[AEHPVWXY])|(?<d>W)(?<a>1[0-4A-DFGHJKSTUW])|(?<d>W)(?<a>[2-9])|(?<d>WC)(?<a>[12][ABEHNRVX]))\ (?<I>(?<s>\d)(?<u>[ABD-HJLNP-UW-Z]{2}))
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "E0W 6ZS:\u00CF\u00AF\u00D7\u00C5"
(define-fun Witness1 () String (seq.++ "E" (seq.++ "0" (seq.++ "W" (seq.++ " " (seq.++ "6" (seq.++ "Z" (seq.++ "S" (seq.++ ":" (seq.++ "\xcf" (seq.++ "\xaf" (seq.++ "\xd7" (seq.++ "\xc5" "")))))))))))))
;witness2: "\u00FDNEC8P 9LS\u00C1r"
(define-fun Witness2 () String (seq.++ "\xfd" (seq.++ "N" (seq.++ "E" (seq.++ "C" (seq.++ "8" (seq.++ "P" (seq.++ " " (seq.++ "9" (seq.++ "L" (seq.++ "S" (seq.++ "\xc1" (seq.++ "r" "")))))))))))))

(assert (= regexA (re.++ (re.union (re.++ (re.union (re.union (re.range "B" "B")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "L" "N") (re.range "S" "S")))))(re.union (re.++ (re.range "A" "A") (re.union (re.range "B" "B") (re.range "L" "L")))(re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "B")(re.union (re.range "D" "D")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N") (re.range "R" "T")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "B")(re.union (re.range "F" "F")(re.union (re.range "H" "H")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T") (re.range "V" "W")))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "G" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "T" "T") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "H" "H")(re.union (re.range "N" "N") (re.range "X" "X"))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "K" "K") (re.range "Y" "Y")))(re.union (re.++ (re.range "G" "G") (re.union (re.range "L" "L")(re.union (re.range "U" "U") (re.range "Y" "Y"))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "G" "G")(re.union (re.range "P" "P")(re.union (re.range "R" "S")(re.union (re.range "U" "U") (re.range "X" "X"))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P") (re.range "V" "V")))))(re.union (str.to_re (seq.++ "J" (seq.++ "E" "")))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "A")(re.union (re.range "T" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "S" "S") (re.range "U" "U")))))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "E" "E") (re.range "K" "L")))(re.union (re.++ (re.range "N" "N") (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "N" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "W" "W")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "L" "L") (re.range "X" "X")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "O" "O") (re.range "R" "R")))))))(re.union (re.++ (re.range "R" "R") (re.union (re.range "G" "H") (re.range "M" "M")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "K" "P")(re.union (re.range "R" "T")(re.union (re.range "W" "W") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "Q" "S") (re.range "W" "W")))))))(re.union (str.to_re (seq.++ "U" (seq.++ "B" "")))(re.union (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "R" "S") (re.range "V" "V")))))))(re.union (str.to_re (seq.++ "Y" (seq.++ "O" ""))) (str.to_re (seq.++ "Z" (seq.++ "E" "")))))))))))))))))))))))))) (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))))(re.union (re.++ (re.range "E" "E") (re.++ (re.range "0" "9") (re.range "W" "W")))(re.union (re.++ (str.to_re (seq.++ "E" (seq.++ "C" ""))) (re.++ (re.range "0" "9") (re.union (re.range "0" "0")(re.union (re.range "A" "A")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "V" "V") (re.range "Y" "Y")))))))))(re.union (re.++ (re.range "N" "N") (re.++ (re.range "0" "9") (re.range "P" "P")))(re.union (re.++ (str.to_re (seq.++ "N" (seq.++ "W" ""))) (re.++ (re.range "0" "9") (re.range "W" "W")))(re.union (re.++ (str.to_re (seq.++ "S" (seq.++ "E" ""))) (re.++ (re.range "0" "9") (re.range "P" "P")))(re.union (re.++ (str.to_re (seq.++ "S" (seq.++ "W" ""))) (re.++ (re.range "0" "9") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "P" "P") (re.range "V" "Y")))))))(re.union (re.++ (re.range "W" "W") (re.++ (re.range "1" "1") (re.union (re.range "0" "4")(re.union (re.range "A" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W"))))))))(re.union (re.++ (re.range "W" "W") (re.range "2" "9")) (re.++ (str.to_re (seq.++ "W" (seq.++ "C" ""))) (re.++ (re.range "1" "2") (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "N" "N")(re.union (re.range "R" "R")(re.union (re.range "V" "V") (re.range "X" "X"))))))))))))))))))(re.++ (re.range " " " ") (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z")))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
