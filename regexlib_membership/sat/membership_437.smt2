;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (LOC[^']*')(GID[^']*')?(GDS[^']*')?(FTX[^']*'){0,9}(MEA[^']*'){1,9}(DIM[^']*'){0,9}(TMP[^']*')?(RNG[^']*')?(LOC[^']*'){0,9}(RFF[^']*')((EQD[^']*')(EQA[^']*'){0,9}(NAD[^']*')?){0,3}
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "_\u00CBG0`LOC\'GDS\'FTX\'FTXm\'FTX\x13\'MEA\u0089\u00C5\'MEA\'MEA\'DIM\'DIM\'TMP0\'LOC\'LOC\'RFF\u00A6\u00F9\u0090\u00DA\"\u0097\'EQD:{\'EQA6>\u00FE,\'EQA\'EQD\'EQA\u00FD\'EQA\'"
(define-fun Witness1 () String (seq.++ "_" (seq.++ "\xcb" (seq.++ "G" (seq.++ "0" (seq.++ "`" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "G" (seq.++ "D" (seq.++ "S" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "m" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "\x13" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "\x89" (seq.++ "\xc5" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "'" (seq.++ "D" (seq.++ "I" (seq.++ "M" (seq.++ "'" (seq.++ "D" (seq.++ "I" (seq.++ "M" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "P" (seq.++ "0" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "R" (seq.++ "F" (seq.++ "F" (seq.++ "\xa6" (seq.++ "\xf9" (seq.++ "\x90" (seq.++ "\xda" (seq.++ "\x22" (seq.++ "\x97" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "D" (seq.++ ":" (seq.++ "{" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "6" (seq.++ ">" (seq.++ "\xfe" (seq.++ "," (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "D" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "\xfd" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "'" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "LOC\u0097\'GID\'FTX\'FTX\'MEAT\u00F3\'MEA\x8\xE3\'MEA\'DIM\'TMP\u00A0\'RNG\u00C4\u00AF\'LOC\'LOC\'LOC\'RFF\u0094\'EQD|\'EQA\'EQA\'NAD\u009B\u00ADSZ\u00CC\'\u00DA"
(define-fun Witness2 () String (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "\x97" (seq.++ "'" (seq.++ "G" (seq.++ "I" (seq.++ "D" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "T" (seq.++ "\xf3" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "\x08" (seq.++ "\x0e" (seq.++ "3" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "'" (seq.++ "D" (seq.++ "I" (seq.++ "M" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "P" (seq.++ "\xa0" (seq.++ "'" (seq.++ "R" (seq.++ "N" (seq.++ "G" (seq.++ "\xc4" (seq.++ "\xaf" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "R" (seq.++ "F" (seq.++ "F" (seq.++ "\x94" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "D" (seq.++ "|" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "'" (seq.++ "N" (seq.++ "A" (seq.++ "D" (seq.++ "\x9b" (seq.++ "\xad" (seq.++ "S" (seq.++ "Z" (seq.++ "\xcc" (seq.++ "'" (seq.++ "\xda" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (seq.++ "L" (seq.++ "O" (seq.++ "C" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))(re.++ (re.opt (re.++ (str.to_re (seq.++ "G" (seq.++ "I" (seq.++ "D" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (seq.++ "G" (seq.++ "D" (seq.++ "S" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "F" (seq.++ "T" (seq.++ "X" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 1 9) (re.++ (str.to_re (seq.++ "M" (seq.++ "E" (seq.++ "A" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "D" (seq.++ "I" (seq.++ "M" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (seq.++ "T" (seq.++ "M" (seq.++ "P" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (seq.++ "R" (seq.++ "N" (seq.++ "G" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "L" (seq.++ "O" (seq.++ "C" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ (re.++ (str.to_re (seq.++ "R" (seq.++ "F" (seq.++ "F" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))) ((_ re.loop 0 3) (re.++ (re.++ (str.to_re (seq.++ "E" (seq.++ "Q" (seq.++ "D" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "E" (seq.++ "Q" (seq.++ "A" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))) (re.opt (re.++ (str.to_re (seq.++ "N" (seq.++ "A" (seq.++ "D" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
