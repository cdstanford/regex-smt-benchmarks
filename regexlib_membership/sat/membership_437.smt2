;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (LOC[^']*')(GID[^']*')?(GDS[^']*')?(FTX[^']*'){0,9}(MEA[^']*'){1,9}(DIM[^']*'){0,9}(TMP[^']*')?(RNG[^']*')?(LOC[^']*'){0,9}(RFF[^']*')((EQD[^']*')(EQA[^']*'){0,9}(NAD[^']*')?){0,3}
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "_\u00CBG0`LOC\'GDS\'FTX\'FTXm\'FTX\x13\'MEA\u0089\u00C5\'MEA\'MEA\'DIM\'DIM\'TMP0\'LOC\'LOC\'RFF\u00A6\u00F9\u0090\u00DA\"\u0097\'EQD:{\'EQA6>\u00FE,\'EQA\'EQD\'EQA\u00FD\'EQA\'"
(define-fun Witness1 () String (str.++ "_" (str.++ "\u{cb}" (str.++ "G" (str.++ "0" (str.++ "`" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "G" (str.++ "D" (str.++ "S" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "m" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "\u{13}" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "\u{89}" (str.++ "\u{c5}" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "0" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "\u{a6}" (str.++ "\u{f9}" (str.++ "\u{90}" (str.++ "\u{da}" (str.++ "\u{22}" (str.++ "\u{97}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ ":" (str.++ "{" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "6" (str.++ ">" (str.++ "\u{fe}" (str.++ "," (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "\u{fd}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "LOC\u0097\'GID\'FTX\'FTX\'MEAT\u00F3\'MEA\x8\xE3\'MEA\'DIM\'TMP\u00A0\'RNG\u00C4\u00AF\'LOC\'LOC\'LOC\'RFF\u0094\'EQD|\'EQA\'EQA\'NAD\u009B\u00ADSZ\u00CC\'\u00DA"
(define-fun Witness2 () String (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "\u{97}" (str.++ "'" (str.++ "G" (str.++ "I" (str.++ "D" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "T" (str.++ "\u{f3}" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "\u{08}" (str.++ "\u{0e}" (str.++ "3" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "\u{a0}" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "\u{c4}" (str.++ "\u{af}" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "\u{94}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "|" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" (str.++ "N" (str.++ "A" (str.++ "D" (str.++ "\u{9b}" (str.++ "\u{ad}" (str.++ "S" (str.++ "Z" (str.++ "\u{cc}" (str.++ "'" (str.++ "\u{da}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ (re.opt (re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "G" (str.++ "D" (str.++ "S" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "F" (str.++ "T" (str.++ "X" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 1 9) (re.++ (str.to_re (str.++ "M" (str.++ "E" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "I" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "T" (str.++ "M" (str.++ "P" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "R" (str.++ "N" (str.++ "G" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.++ (str.to_re (str.++ "R" (str.++ "F" (str.++ "F" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))) ((_ re.loop 0 3) (re.++ (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))) (re.opt (re.++ (str.to_re (str.++ "N" (str.++ "A" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
