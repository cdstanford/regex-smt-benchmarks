;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = &lt;asp:requiredfieldvalidator(\s*\w+\s*=\s*\&quot;?\s*\w+\s*\&quot;?\s*)+\s*&gt;\s*&lt;\/asp:requiredfieldvalidator&gt;
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "\u00E9\u0096&lt;asp:requiredfieldvalidator\u0085 \u00C7 \u00A0=\xD\u00A0&quot;\u00859\u0085\xB&quot; \x9\u0085\u00A0\x9  &gt; \xD\xC&lt;/asp:requiredfieldvalidator&gt;"
(define-fun Witness1 () String (seq.++ "\xe9" (seq.++ "\x96" (seq.++ "&" (seq.++ "l" (seq.++ "t" (seq.++ ";" (seq.++ "a" (seq.++ "s" (seq.++ "p" (seq.++ ":" (seq.++ "r" (seq.++ "e" (seq.++ "q" (seq.++ "u" (seq.++ "i" (seq.++ "r" (seq.++ "e" (seq.++ "d" (seq.++ "f" (seq.++ "i" (seq.++ "e" (seq.++ "l" (seq.++ "d" (seq.++ "v" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "d" (seq.++ "a" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "\x85" (seq.++ " " (seq.++ "\xc7" (seq.++ " " (seq.++ "\xa0" (seq.++ "=" (seq.++ "\x0d" (seq.++ "\xa0" (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" (seq.++ ";" (seq.++ "\x85" (seq.++ "9" (seq.++ "\x85" (seq.++ "\x0b" (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" (seq.++ ";" (seq.++ " " (seq.++ "\x09" (seq.++ "\x85" (seq.++ "\xa0" (seq.++ "\x09" (seq.++ " " (seq.++ " " (seq.++ "&" (seq.++ "g" (seq.++ "t" (seq.++ ";" (seq.++ " " (seq.++ "\x0d" (seq.++ "\x0c" (seq.++ "&" (seq.++ "l" (seq.++ "t" (seq.++ ";" (seq.++ "/" (seq.++ "a" (seq.++ "s" (seq.++ "p" (seq.++ ":" (seq.++ "r" (seq.++ "e" (seq.++ "q" (seq.++ "u" (seq.++ "i" (seq.++ "r" (seq.++ "e" (seq.++ "d" (seq.++ "f" (seq.++ "i" (seq.++ "e" (seq.++ "l" (seq.++ "d" (seq.++ "v" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "d" (seq.++ "a" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "&" (seq.++ "g" (seq.++ "t" (seq.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "&lt;asp:requiredfieldvalidator\u0085\xDI022=&quot;\u00A0\u0085\xBY\x9&quot\xC \u0085\u00BA\u00AA\u0085=\xD\u0085 \xD&quot;\x9\u00A0\xC\u00B54  &quot\u0085 \u00A0&gt;\u0085&lt;/asp:requiredfieldvalidator&gt;"
(define-fun Witness2 () String (seq.++ "&" (seq.++ "l" (seq.++ "t" (seq.++ ";" (seq.++ "a" (seq.++ "s" (seq.++ "p" (seq.++ ":" (seq.++ "r" (seq.++ "e" (seq.++ "q" (seq.++ "u" (seq.++ "i" (seq.++ "r" (seq.++ "e" (seq.++ "d" (seq.++ "f" (seq.++ "i" (seq.++ "e" (seq.++ "l" (seq.++ "d" (seq.++ "v" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "d" (seq.++ "a" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "\x85" (seq.++ "\x0d" (seq.++ "I" (seq.++ "0" (seq.++ "2" (seq.++ "2" (seq.++ "=" (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" (seq.++ ";" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "\x0b" (seq.++ "Y" (seq.++ "\x09" (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" (seq.++ "\x0c" (seq.++ " " (seq.++ "\x85" (seq.++ "\xba" (seq.++ "\xaa" (seq.++ "\x85" (seq.++ "=" (seq.++ "\x0d" (seq.++ "\x85" (seq.++ " " (seq.++ "\x0d" (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" (seq.++ ";" (seq.++ "\x09" (seq.++ "\xa0" (seq.++ "\x0c" (seq.++ "\xb5" (seq.++ "4" (seq.++ " " (seq.++ " " (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" (seq.++ "\x85" (seq.++ " " (seq.++ "\xa0" (seq.++ "&" (seq.++ "g" (seq.++ "t" (seq.++ ";" (seq.++ "\x85" (seq.++ "&" (seq.++ "l" (seq.++ "t" (seq.++ ";" (seq.++ "/" (seq.++ "a" (seq.++ "s" (seq.++ "p" (seq.++ ":" (seq.++ "r" (seq.++ "e" (seq.++ "q" (seq.++ "u" (seq.++ "i" (seq.++ "r" (seq.++ "e" (seq.++ "d" (seq.++ "f" (seq.++ "i" (seq.++ "e" (seq.++ "l" (seq.++ "d" (seq.++ "v" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "d" (seq.++ "a" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "&" (seq.++ "g" (seq.++ "t" (seq.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (seq.++ "&" (seq.++ "l" (seq.++ "t" (seq.++ ";" (seq.++ "a" (seq.++ "s" (seq.++ "p" (seq.++ ":" (seq.++ "r" (seq.++ "e" (seq.++ "q" (seq.++ "u" (seq.++ "i" (seq.++ "r" (seq.++ "e" (seq.++ "d" (seq.++ "f" (seq.++ "i" (seq.++ "e" (seq.++ "l" (seq.++ "d" (seq.++ "v" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "d" (seq.++ "a" (seq.++ "t" (seq.++ "o" (seq.++ "r" "")))))))))))))))))))))))))))))))(re.++ (re.+ (re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (str.to_re (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (str.to_re (seq.++ "&" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";")) (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))))))))))))))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (str.to_re (seq.++ "&" (seq.++ "g" (seq.++ "t" (seq.++ ";" "")))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (str.to_re (seq.++ "&" (seq.++ "l" (seq.++ "t" (seq.++ ";" (seq.++ "/" (seq.++ "a" (seq.++ "s" (seq.++ "p" (seq.++ ":" (seq.++ "r" (seq.++ "e" (seq.++ "q" (seq.++ "u" (seq.++ "i" (seq.++ "r" (seq.++ "e" (seq.++ "d" (seq.++ "f" (seq.++ "i" (seq.++ "e" (seq.++ "l" (seq.++ "d" (seq.++ "v" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "d" (seq.++ "a" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "&" (seq.++ "g" (seq.++ "t" (seq.++ ";" "")))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
