;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = &lt;asp:requiredfieldvalidator(\s*\w+\s*=\s*\&quot;?\s*\w+\s*\&quot;?\s*)+\s*&gt;\s*&lt;\/asp:requiredfieldvalidator&gt;
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "\u00E9\u0096&lt;asp:requiredfieldvalidator\u0085 \u00C7 \u00A0=\xD\u00A0&quot;\u00859\u0085\xB&quot; \x9\u0085\u00A0\x9  &gt; \xD\xC&lt;/asp:requiredfieldvalidator&gt;"
(define-fun Witness1 () String (str.++ "\u{e9}" (str.++ "\u{96}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "\u{85}" (str.++ " " (str.++ "\u{c7}" (str.++ " " (str.++ "\u{a0}" (str.++ "=" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{85}" (str.++ "9" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{09}" (str.++ " " (str.++ " " (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ " " (str.++ "\u{0d}" (str.++ "\u{0c}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "&lt;asp:requiredfieldvalidator\u0085\xDI022=&quot;\u00A0\u0085\xBY\x9&quot\xC \u0085\u00BA\u00AA\u0085=\xD\u0085 \xD&quot;\x9\u00A0\xC\u00B54  &quot\u0085 \u00A0&gt;\u0085&lt;/asp:requiredfieldvalidator&gt;"
(define-fun Witness2 () String (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "I" (str.++ "0" (str.++ "2" (str.++ "2" (str.++ "=" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0b}" (str.++ "Y" (str.++ "\u{09}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "\u{0c}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{ba}" (str.++ "\u{aa}" (str.++ "\u{85}" (str.++ "=" (str.++ "\u{0d}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{0d}" (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ ";" (str.++ "\u{09}" (str.++ "\u{a0}" (str.++ "\u{0c}" (str.++ "\u{b5}" (str.++ "4" (str.++ " " (str.++ " " (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" (str.++ "\u{85}" (str.++ " " (str.++ "\u{a0}" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" (str.++ "\u{85}" (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" "")))))))))))))))))))))))))))))))(re.++ (re.+ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "=" "=")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "q" (str.++ "u" (str.++ "o" (str.++ "t" ""))))))(re.++ (re.opt (re.range ";" ";")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "&" (str.++ "l" (str.++ "t" (str.++ ";" (str.++ "/" (str.++ "a" (str.++ "s" (str.++ "p" (str.++ ":" (str.++ "r" (str.++ "e" (str.++ "q" (str.++ "u" (str.++ "i" (str.++ "r" (str.++ "e" (str.++ "d" (str.++ "f" (str.++ "i" (str.++ "e" (str.++ "l" (str.++ "d" (str.++ "v" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "d" (str.++ "a" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "&" (str.++ "g" (str.++ "t" (str.++ ";" "")))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
