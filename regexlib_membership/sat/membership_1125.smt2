;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((?<dir>[\-ld])(?<permission>([\-r][\-w][\-xs]){3})\s+(?<filecode>\d+)\s+(?<owner>\w+)\s+(?<group>\w+)\s+(?<size>\d+)\s+(?<timestamp>(?<year>\d{4})-(?<month>\d{2})-(?<day>\d?\d)\s+(?<hour>\d{2}):(?<minute>\d{2}))\s+(?<name>\w.+))$
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "-rwxrwsrw- \xA 2680\xC\u00BA\u00D6 \xD\xD\u00A0\u00B5\u00A01\x90889-88-6  58:47\u0085\u00F2\u00B6\u0086"
(define-fun Witness1 () String (str.++ "-" (str.++ "r" (str.++ "w" (str.++ "x" (str.++ "r" (str.++ "w" (str.++ "s" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ " " (str.++ "\u{0a}" (str.++ " " (str.++ "2" (str.++ "6" (str.++ "8" (str.++ "0" (str.++ "\u{0c}" (str.++ "\u{ba}" (str.++ "\u{d6}" (str.++ " " (str.++ "\u{0d}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "\u{b5}" (str.++ "\u{a0}" (str.++ "1" (str.++ "\u{09}" (str.++ "0" (str.++ "8" (str.++ "8" (str.++ "9" (str.++ "-" (str.++ "8" (str.++ "8" (str.++ "-" (str.++ "6" (str.++ " " (str.++ " " (str.++ "5" (str.++ "8" (str.++ ":" (str.++ "4" (str.++ "7" (str.++ "\u{85}" (str.++ "\u{f2}" (str.++ "\u{b6}" (str.++ "\u{86}" "")))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "-r--rw----\u0085013\u00A0\u00859\u00AA1 \u00A0\u0085\u00E4\u00B58 \u0085783 0619-05-20\u008518:68\xD\xD\u00A09\u00D5"
(define-fun Witness2 () String (str.++ "-" (str.++ "r" (str.++ "-" (str.++ "-" (str.++ "r" (str.++ "w" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "-" (str.++ "\u{85}" (str.++ "0" (str.++ "1" (str.++ "3" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "9" (str.++ "\u{aa}" (str.++ "1" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{e4}" (str.++ "\u{b5}" (str.++ "8" (str.++ " " (str.++ "\u{85}" (str.++ "7" (str.++ "8" (str.++ "3" (str.++ " " (str.++ "0" (str.++ "6" (str.++ "1" (str.++ "9" (str.++ "-" (str.++ "0" (str.++ "5" (str.++ "-" (str.++ "2" (str.++ "0" (str.++ "\u{85}" (str.++ "1" (str.++ "8" (str.++ ":" (str.++ "6" (str.++ "8" (str.++ "\u{0d}" (str.++ "\u{0d}" (str.++ "\u{a0}" (str.++ "9" (str.++ "\u{d5}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.union (re.range "-" "-")(re.union (re.range "d" "d") (re.range "l" "l")))(re.++ ((_ re.loop 3 3) (re.++ (re.union (re.range "-" "-") (re.range "r" "r"))(re.++ (re.union (re.range "-" "-") (re.range "w" "w")) (re.union (re.range "-" "-")(re.union (re.range "s" "s") (re.range "x" "x"))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range "-" "-")(re.++ (re.++ (re.opt (re.range "0" "9")) (re.range "0" "9"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 2 2) (re.range "0" "9"))(re.++ (re.range ":" ":") ((_ re.loop 2 2) (re.range "0" "9"))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.+ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))))))))))) (str.to_re "")))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
