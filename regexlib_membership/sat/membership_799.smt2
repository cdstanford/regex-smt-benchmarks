;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = <(/)?(a|abbr|acronym|address|applet|area|b|base|basefont|bdo|big|blockquote|body|br|button|caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|em|fieldset|font|form|frame|frameset|h[1-6]|head|hr|html|i|iframe|img|input|ins|isindex|kbd|label|legend|li|link|map|menu|meta|noframes|noscript|object|ol|optgroup|option|p|param|pre|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|xmp){1}(\s(\"[^\"]*\"*|[^>])*)*>
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "<samp>\u00BFf"
(define-fun Witness1 () String (seq.++ "<" (seq.++ "s" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ">" (seq.++ "\xbf" (seq.++ "f" "")))))))))
;witness2: "</strike\u00A0\"\u00A8\x1E\x9>\u0094\u00E1\u0084\u00D3S"
(define-fun Witness2 () String (seq.++ "<" (seq.++ "/" (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "i" (seq.++ "k" (seq.++ "e" (seq.++ "\xa0" (seq.++ "\x22" (seq.++ "\xa8" (seq.++ "\x1e" (seq.++ "\x09" (seq.++ ">" (seq.++ "\x94" (seq.++ "\xe1" (seq.++ "\x84" (seq.++ "\xd3" (seq.++ "S" ""))))))))))))))))))))

(assert (= regexA (re.++ (re.range "<" "<")(re.++ (re.opt (re.range "/" "/"))(re.++ (re.union (re.range "a" "a")(re.union (str.to_re (seq.++ "a" (seq.++ "b" (seq.++ "b" (seq.++ "r" "")))))(re.union (str.to_re (seq.++ "a" (seq.++ "c" (seq.++ "r" (seq.++ "o" (seq.++ "n" (seq.++ "y" (seq.++ "m" ""))))))))(re.union (str.to_re (seq.++ "a" (seq.++ "d" (seq.++ "d" (seq.++ "r" (seq.++ "e" (seq.++ "s" (seq.++ "s" ""))))))))(re.union (str.to_re (seq.++ "a" (seq.++ "p" (seq.++ "p" (seq.++ "l" (seq.++ "e" (seq.++ "t" "")))))))(re.union (str.to_re (seq.++ "a" (seq.++ "r" (seq.++ "e" (seq.++ "a" "")))))(re.union (re.range "b" "b")(re.union (str.to_re (seq.++ "b" (seq.++ "a" (seq.++ "s" (seq.++ "e" "")))))(re.union (str.to_re (seq.++ "b" (seq.++ "a" (seq.++ "s" (seq.++ "e" (seq.++ "f" (seq.++ "o" (seq.++ "n" (seq.++ "t" "")))))))))(re.union (str.to_re (seq.++ "b" (seq.++ "d" (seq.++ "o" ""))))(re.union (str.to_re (seq.++ "b" (seq.++ "i" (seq.++ "g" ""))))(re.union (str.to_re (seq.++ "b" (seq.++ "l" (seq.++ "o" (seq.++ "c" (seq.++ "k" (seq.++ "q" (seq.++ "u" (seq.++ "o" (seq.++ "t" (seq.++ "e" "")))))))))))(re.union (str.to_re (seq.++ "b" (seq.++ "o" (seq.++ "d" (seq.++ "y" "")))))(re.union (str.to_re (seq.++ "b" (seq.++ "r" "")))(re.union (str.to_re (seq.++ "b" (seq.++ "u" (seq.++ "t" (seq.++ "t" (seq.++ "o" (seq.++ "n" "")))))))(re.union (str.to_re (seq.++ "c" (seq.++ "a" (seq.++ "p" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" ""))))))))(re.union (str.to_re (seq.++ "c" (seq.++ "e" (seq.++ "n" (seq.++ "t" (seq.++ "e" (seq.++ "r" "")))))))(re.union (str.to_re (seq.++ "c" (seq.++ "i" (seq.++ "t" (seq.++ "e" "")))))(re.union (str.to_re (seq.++ "c" (seq.++ "o" (seq.++ "d" (seq.++ "e" "")))))(re.union (str.to_re (seq.++ "c" (seq.++ "o" (seq.++ "l" ""))))(re.union (str.to_re (seq.++ "c" (seq.++ "o" (seq.++ "l" (seq.++ "g" (seq.++ "r" (seq.++ "o" (seq.++ "u" (seq.++ "p" "")))))))))(re.union (str.to_re (seq.++ "d" (seq.++ "d" "")))(re.union (str.to_re (seq.++ "d" (seq.++ "e" (seq.++ "l" ""))))(re.union (str.to_re (seq.++ "d" (seq.++ "i" (seq.++ "r" ""))))(re.union (str.to_re (seq.++ "d" (seq.++ "i" (seq.++ "v" ""))))(re.union (str.to_re (seq.++ "d" (seq.++ "f" (seq.++ "n" ""))))(re.union (str.to_re (seq.++ "d" (seq.++ "l" "")))(re.union (str.to_re (seq.++ "d" (seq.++ "t" "")))(re.union (str.to_re (seq.++ "e" (seq.++ "m" "")))(re.union (str.to_re (seq.++ "f" (seq.++ "i" (seq.++ "e" (seq.++ "l" (seq.++ "d" (seq.++ "s" (seq.++ "e" (seq.++ "t" "")))))))))(re.union (str.to_re (seq.++ "f" (seq.++ "o" (seq.++ "n" (seq.++ "t" "")))))(re.union (str.to_re (seq.++ "f" (seq.++ "o" (seq.++ "r" (seq.++ "m" "")))))(re.union (str.to_re (seq.++ "f" (seq.++ "r" (seq.++ "a" (seq.++ "m" (seq.++ "e" ""))))))(re.union (str.to_re (seq.++ "f" (seq.++ "r" (seq.++ "a" (seq.++ "m" (seq.++ "e" (seq.++ "s" (seq.++ "e" (seq.++ "t" "")))))))))(re.union (re.++ (re.range "h" "h") (re.range "1" "6"))(re.union (str.to_re (seq.++ "h" (seq.++ "e" (seq.++ "a" (seq.++ "d" "")))))(re.union (str.to_re (seq.++ "h" (seq.++ "r" "")))(re.union (str.to_re (seq.++ "h" (seq.++ "t" (seq.++ "m" (seq.++ "l" "")))))(re.union (re.range "i" "i")(re.union (str.to_re (seq.++ "i" (seq.++ "f" (seq.++ "r" (seq.++ "a" (seq.++ "m" (seq.++ "e" "")))))))(re.union (str.to_re (seq.++ "i" (seq.++ "m" (seq.++ "g" ""))))(re.union (str.to_re (seq.++ "i" (seq.++ "n" (seq.++ "p" (seq.++ "u" (seq.++ "t" ""))))))(re.union (str.to_re (seq.++ "i" (seq.++ "n" (seq.++ "s" ""))))(re.union (str.to_re (seq.++ "i" (seq.++ "s" (seq.++ "i" (seq.++ "n" (seq.++ "d" (seq.++ "e" (seq.++ "x" ""))))))))(re.union (str.to_re (seq.++ "k" (seq.++ "b" (seq.++ "d" ""))))(re.union (str.to_re (seq.++ "l" (seq.++ "a" (seq.++ "b" (seq.++ "e" (seq.++ "l" ""))))))(re.union (str.to_re (seq.++ "l" (seq.++ "e" (seq.++ "g" (seq.++ "e" (seq.++ "n" (seq.++ "d" "")))))))(re.union (str.to_re (seq.++ "l" (seq.++ "i" "")))(re.union (str.to_re (seq.++ "l" (seq.++ "i" (seq.++ "n" (seq.++ "k" "")))))(re.union (str.to_re (seq.++ "m" (seq.++ "a" (seq.++ "p" ""))))(re.union (str.to_re (seq.++ "m" (seq.++ "e" (seq.++ "n" (seq.++ "u" "")))))(re.union (str.to_re (seq.++ "m" (seq.++ "e" (seq.++ "t" (seq.++ "a" "")))))(re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "f" (seq.++ "r" (seq.++ "a" (seq.++ "m" (seq.++ "e" (seq.++ "s" "")))))))))(re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "s" (seq.++ "c" (seq.++ "r" (seq.++ "i" (seq.++ "p" (seq.++ "t" "")))))))))(re.union (str.to_re (seq.++ "o" (seq.++ "b" (seq.++ "j" (seq.++ "e" (seq.++ "c" (seq.++ "t" "")))))))(re.union (str.to_re (seq.++ "o" (seq.++ "l" "")))(re.union (str.to_re (seq.++ "o" (seq.++ "p" (seq.++ "t" (seq.++ "g" (seq.++ "r" (seq.++ "o" (seq.++ "u" (seq.++ "p" "")))))))))(re.union (str.to_re (seq.++ "o" (seq.++ "p" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" "")))))))(re.union (re.range "p" "p")(re.union (str.to_re (seq.++ "p" (seq.++ "a" (seq.++ "r" (seq.++ "a" (seq.++ "m" ""))))))(re.union (str.to_re (seq.++ "p" (seq.++ "r" (seq.++ "e" ""))))(re.union (re.union (re.range "q" "q") (re.range "s" "s"))(re.union (str.to_re (seq.++ "s" (seq.++ "a" (seq.++ "m" (seq.++ "p" "")))))(re.union (str.to_re (seq.++ "s" (seq.++ "c" (seq.++ "r" (seq.++ "i" (seq.++ "p" (seq.++ "t" "")))))))(re.union (str.to_re (seq.++ "s" (seq.++ "e" (seq.++ "l" (seq.++ "e" (seq.++ "c" (seq.++ "t" "")))))))(re.union (str.to_re (seq.++ "s" (seq.++ "m" (seq.++ "a" (seq.++ "l" (seq.++ "l" ""))))))(re.union (str.to_re (seq.++ "s" (seq.++ "p" (seq.++ "a" (seq.++ "n" "")))))(re.union (str.to_re (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "i" (seq.++ "k" (seq.++ "e" "")))))))(re.union (str.to_re (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "o" (seq.++ "n" (seq.++ "g" "")))))))(re.union (str.to_re (seq.++ "s" (seq.++ "t" (seq.++ "y" (seq.++ "l" (seq.++ "e" ""))))))(re.union (str.to_re (seq.++ "s" (seq.++ "u" (seq.++ "b" ""))))(re.union (str.to_re (seq.++ "s" (seq.++ "u" (seq.++ "p" ""))))(re.union (str.to_re (seq.++ "t" (seq.++ "a" (seq.++ "b" (seq.++ "l" (seq.++ "e" ""))))))(re.union (str.to_re (seq.++ "t" (seq.++ "b" (seq.++ "o" (seq.++ "d" (seq.++ "y" ""))))))(re.union (str.to_re (seq.++ "t" (seq.++ "d" "")))(re.union (str.to_re (seq.++ "t" (seq.++ "e" (seq.++ "x" (seq.++ "t" (seq.++ "a" (seq.++ "r" (seq.++ "e" (seq.++ "a" "")))))))))(re.union (str.to_re (seq.++ "t" (seq.++ "f" (seq.++ "o" (seq.++ "o" (seq.++ "t" ""))))))(re.union (str.to_re (seq.++ "t" (seq.++ "h" "")))(re.union (str.to_re (seq.++ "t" (seq.++ "h" (seq.++ "e" (seq.++ "a" (seq.++ "d" ""))))))(re.union (str.to_re (seq.++ "t" (seq.++ "i" (seq.++ "t" (seq.++ "l" (seq.++ "e" ""))))))(re.union (str.to_re (seq.++ "t" (seq.++ "r" "")))(re.union (str.to_re (seq.++ "t" (seq.++ "t" "")))(re.union (re.range "u" "u")(re.union (str.to_re (seq.++ "u" (seq.++ "l" "")))(re.union (str.to_re (seq.++ "v" (seq.++ "a" (seq.++ "r" "")))) (str.to_re (seq.++ "x" (seq.++ "m" (seq.++ "p" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (re.* (re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))) (re.* (re.union (re.++ (re.range "\x22" "\x22")(re.++ (re.* (re.union (re.range "\x00" "!") (re.range "#" "\xff"))) (re.* (re.range "\x22" "\x22")))) (re.union (re.range "\x00" "=") (re.range "?" "\xff")))))) (re.range ">" ">")))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
