;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (^BFPO\s*[0-9]{1,4})|(^GIR\s*0AA$)|(ASCN|BBND|BIQQ|FIQQ|PCRN|SIQQ|STHL|TDCU\s*1ZZ)|(^(A[BL]|B[ABDHLNRST]?|C[ABFHMORTVW]|D[ADEGHLNTY]|E[CHNX]?|F[KY]|G[LUY]?|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]?|M[EKL]?|N[EGNPRW]?|O[LX]|P[AEHLOR]|R[GHM|S[AEGK-PRSTWY]?|Y[ADFNQRSW|UB|W[A-DFGHJKMNR-W]?|[YO]|[ZE])[1-9][0-9]?[ABEHMNPRVWXY]?\s*[0-9][ABD-HJLNP-UW-Z]{2}$)
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "\u0087FIQQ\x1D"
(define-fun Witness1 () String (str.++ "\u{87}" (str.++ "F" (str.++ "I" (str.++ "Q" (str.++ "Q" (str.++ "\u{1d}" "")))))))
;witness2: "BIQQu\u00F2a\x9"
(define-fun Witness2 () String (str.++ "B" (str.++ "I" (str.++ "Q" (str.++ "Q" (str.++ "u" (str.++ "\u{f2}" (str.++ "a" (str.++ "\u{09}" "")))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "B" (str.++ "F" (str.++ "P" (str.++ "O" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 1 4) (re.range "0" "9")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" ""))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" "")))) (str.to_re "")))))(re.union (re.union (str.to_re (str.++ "A" (str.++ "S" (str.++ "C" (str.++ "N" "")))))(re.union (str.to_re (str.++ "B" (str.++ "B" (str.++ "N" (str.++ "D" "")))))(re.union (str.to_re (str.++ "B" (str.++ "I" (str.++ "Q" (str.++ "Q" "")))))(re.union (str.to_re (str.++ "F" (str.++ "I" (str.++ "Q" (str.++ "Q" "")))))(re.union (str.to_re (str.++ "P" (str.++ "C" (str.++ "R" (str.++ "N" "")))))(re.union (str.to_re (str.++ "S" (str.++ "I" (str.++ "Q" (str.++ "Q" "")))))(re.union (str.to_re (str.++ "S" (str.++ "T" (str.++ "H" (str.++ "L" ""))))) (re.++ (str.to_re (str.++ "T" (str.++ "D" (str.++ "C" (str.++ "U" "")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (str.to_re (str.++ "1" (str.++ "Z" (str.++ "Z" ""))))))))))))) (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "B" "B") (re.range "L" "L")))(re.union (re.++ (re.range "B" "B") (re.opt (re.union (re.range "A" "B")(re.union (re.range "D" "D")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N") (re.range "R" "T"))))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "B")(re.union (re.range "F" "F")(re.union (re.range "H" "H")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T") (re.range "V" "W")))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "G" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "T" "T") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "E" "E") (re.opt (re.union (re.range "C" "C")(re.union (re.range "H" "H")(re.union (re.range "N" "N") (re.range "X" "X"))))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "K" "K") (re.range "Y" "Y")))(re.union (re.++ (re.range "G" "G") (re.opt (re.union (re.range "L" "L")(re.union (re.range "U" "U") (re.range "Y" "Y")))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "G" "G")(re.union (re.range "P" "P")(re.union (re.range "R" "S")(re.union (re.range "U" "U") (re.range "X" "X"))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P") (re.range "V" "V")))))(re.union (str.to_re (str.++ "J" (str.++ "E" "")))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "A")(re.union (re.range "T" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))(re.union (re.++ (re.range "L" "L") (re.opt (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "S" "S") (re.range "U" "U"))))))))(re.union (re.++ (re.range "M" "M") (re.opt (re.union (re.range "E" "E") (re.range "K" "L"))))(re.union (re.++ (re.range "N" "N") (re.opt (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "N" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "W" "W"))))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "L" "L") (re.range "X" "X")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "O" "O") (re.range "R" "R")))))))(re.union (re.++ (re.range "R" "R") (re.opt (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "G" "H")(re.union (re.range "K" "P")(re.union (re.range "R" "T")(re.union (re.range "W" "W")(re.union (re.range "Y" "Y")(re.union (re.range "[" "[") (re.range "|" "|")))))))))))(re.union (re.++ (re.range "Y" "Y") (re.opt (re.union (re.range "A" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "K")(re.union (re.range "M" "N")(re.union (re.range "Q" "W")(re.union (re.range "[" "[") (re.range "|" "|"))))))))) (re.union (re.range "E" "E")(re.union (re.range "O" "O") (re.range "Y" "Z")))))))))))))))))))))(re.++ (re.range "1" "9")(re.++ (re.opt (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y"))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "0" "9")(re.++ ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z")))))))) (str.to_re ""))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
