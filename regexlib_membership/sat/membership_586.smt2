;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = \s*([a-z\. ]+)\s*\n\s*([a-z0-9\. #]+)\s*\n\s*([a-z \.]+)\s*,\s*([a-z \.]+)\s*\n?(?:\s*(\d{1,15}(?:-\d{1,4})?)\s*\n)?(?:\s*(\+?(?:1\s*[-\/\.]?)?(?:\((?:\d{3})\)|(?:\d{3}))\s*[-\/\.]?\s*(?:\d{3})\s*[-\/\.]?\s*(?:\d{4})(?:(?:[ \t]*[xX]|[eE][xX][tT])\.?[ \t]*(?:\d+))*))?
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "z..qwty.\xD\xA\xA6z6k\u0085\u00A0\xA .\u00A0,\u00A0\u00A0 vz.\u0085(047)/\u0085\u0085  \u00A0338\u0085 -\x9 \u0085\u00853488"
(define-fun Witness1 () String (seq.++ "z" (seq.++ "." (seq.++ "." (seq.++ "q" (seq.++ "w" (seq.++ "t" (seq.++ "y" (seq.++ "." (seq.++ "\x0d" (seq.++ "\x0a" (seq.++ "\x0a" (seq.++ "6" (seq.++ "z" (seq.++ "6" (seq.++ "k" (seq.++ "\x85" (seq.++ "\xa0" (seq.++ "\x0a" (seq.++ " " (seq.++ "." (seq.++ "\xa0" (seq.++ "," (seq.++ "\xa0" (seq.++ "\xa0" (seq.++ " " (seq.++ "v" (seq.++ "z" (seq.++ "." (seq.++ "\x85" (seq.++ "(" (seq.++ "0" (seq.++ "4" (seq.++ "7" (seq.++ ")" (seq.++ "/" (seq.++ "\x85" (seq.++ "\x85" (seq.++ " " (seq.++ " " (seq.++ "\xa0" (seq.++ "3" (seq.++ "3" (seq.++ "8" (seq.++ "\x85" (seq.++ " " (seq.++ "-" (seq.++ "\x09" (seq.++ " " (seq.++ "\x85" (seq.++ "\x85" (seq.++ "3" (seq.++ "4" (seq.++ "8" (seq.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "\u0085 z. .\xA9\x9\u0085\xAc \u0085,a\u00A0\u0085\u0085+1 /948/ \xB 8739225eXt19eXt.2"
(define-fun Witness2 () String (seq.++ "\x85" (seq.++ " " (seq.++ "z" (seq.++ "." (seq.++ " " (seq.++ "." (seq.++ "\x0a" (seq.++ "9" (seq.++ "\x09" (seq.++ "\x85" (seq.++ "\x0a" (seq.++ "c" (seq.++ " " (seq.++ "\x85" (seq.++ "," (seq.++ "a" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "\x85" (seq.++ "+" (seq.++ "1" (seq.++ " " (seq.++ "/" (seq.++ "9" (seq.++ "4" (seq.++ "8" (seq.++ "/" (seq.++ " " (seq.++ "\x0b" (seq.++ " " (seq.++ "8" (seq.++ "7" (seq.++ "3" (seq.++ "9" (seq.++ "2" (seq.++ "2" (seq.++ "5" (seq.++ "e" (seq.++ "X" (seq.++ "t" (seq.++ "1" (seq.++ "9" (seq.++ "e" (seq.++ "X" (seq.++ "t" (seq.++ "." (seq.++ "2" ""))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.range "\x0a" "\x0a")(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "." ".")(re.union (re.range "0" "9") (re.range "a" "z"))))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.range "\x0a" "\x0a")(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.opt (re.range "\x0a" "\x0a"))(re.++ (re.opt (re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.++ ((_ re.loop 1 15) (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") ((_ re.loop 1 4) (re.range "0" "9")))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (re.range "\x0a" "\x0a"))))) (re.opt (re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.++ (re.range "1" "1")(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (re.opt (re.range "-" "/")))))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.++ (re.union (re.++ (re.* (re.union (re.range "\x09" "\x09") (re.range " " " "))) (re.union (re.range "X" "X") (re.range "x" "x"))) (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.union (re.range "T" "T") (re.range "t" "t")))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "\x09" "\x09") (re.range " " " "))) (re.+ (re.range "0" "9"))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
