;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = \s*([a-z\. ]+)\s*\n\s*([a-z0-9\. #]+)\s*\n\s*([a-z \.]+)\s*,\s*([a-z \.]+)\s*\n?(?:\s*(\d{1,15}(?:-\d{1,4})?)\s*\n)?(?:\s*(\+?(?:1\s*[-\/\.]?)?(?:\((?:\d{3})\)|(?:\d{3}))\s*[-\/\.]?\s*(?:\d{3})\s*[-\/\.]?\s*(?:\d{4})(?:(?:[ \t]*[xX]|[eE][xX][tT])\.?[ \t]*(?:\d+))*))?
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "z..qwty.\xD\xA\xA6z6k\u0085\u00A0\xA .\u00A0,\u00A0\u00A0 vz.\u0085(047)/\u0085\u0085  \u00A0338\u0085 -\x9 \u0085\u00853488"
(define-fun Witness1 () String (str.++ "z" (str.++ "." (str.++ "." (str.++ "q" (str.++ "w" (str.++ "t" (str.++ "y" (str.++ "." (str.++ "\u{0d}" (str.++ "\u{0a}" (str.++ "\u{0a}" (str.++ "6" (str.++ "z" (str.++ "6" (str.++ "k" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{0a}" (str.++ " " (str.++ "." (str.++ "\u{a0}" (str.++ "," (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ " " (str.++ "v" (str.++ "z" (str.++ "." (str.++ "\u{85}" (str.++ "(" (str.++ "0" (str.++ "4" (str.++ "7" (str.++ ")" (str.++ "/" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ " " (str.++ "\u{a0}" (str.++ "3" (str.++ "3" (str.++ "8" (str.++ "\u{85}" (str.++ " " (str.++ "-" (str.++ "\u{09}" (str.++ " " (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "3" (str.++ "4" (str.++ "8" (str.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "\u0085 z. .\xA9\x9\u0085\xAc \u0085,a\u00A0\u0085\u0085+1 /948/ \xB 8739225eXt19eXt.2"
(define-fun Witness2 () String (str.++ "\u{85}" (str.++ " " (str.++ "z" (str.++ "." (str.++ " " (str.++ "." (str.++ "\u{0a}" (str.++ "9" (str.++ "\u{09}" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "c" (str.++ " " (str.++ "\u{85}" (str.++ "," (str.++ "a" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "+" (str.++ "1" (str.++ " " (str.++ "/" (str.++ "9" (str.++ "4" (str.++ "8" (str.++ "/" (str.++ " " (str.++ "\u{0b}" (str.++ " " (str.++ "8" (str.++ "7" (str.++ "3" (str.++ "9" (str.++ "2" (str.++ "2" (str.++ "5" (str.++ "e" (str.++ "X" (str.++ "t" (str.++ "1" (str.++ "9" (str.++ "e" (str.++ "X" (str.++ "t" (str.++ "." (str.++ "2" ""))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "\u{0a}" "\u{0a}")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "#" "#")(re.union (re.range "." ".")(re.union (re.range "0" "9") (re.range "a" "z"))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "\u{0a}" "\u{0a}")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range " " " ")(re.union (re.range "." ".") (re.range "a" "z"))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "\u{0a}" "\u{0a}"))(re.++ (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ ((_ re.loop 1 15) (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") ((_ re.loop 1 4) (re.range "0" "9")))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "\u{0a}" "\u{0a}"))))) (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.++ (re.opt (re.range "+" "+"))(re.++ (re.opt (re.++ (re.range "1" "1")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.opt (re.range "-" "/")))))(re.++ (re.union (re.++ (re.range "(" "(")(re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.range ")" ")"))) ((_ re.loop 3 3) (re.range "0" "9")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "-" "/"))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.* (re.++ (re.union (re.++ (re.* (re.union (re.range "\u{09}" "\u{09}") (re.range " " " "))) (re.union (re.range "X" "X") (re.range "x" "x"))) (re.++ (re.union (re.range "E" "E") (re.range "e" "e"))(re.++ (re.union (re.range "X" "X") (re.range "x" "x")) (re.union (re.range "T" "T") (re.range "t" "t")))))(re.++ (re.opt (re.range "." "."))(re.++ (re.* (re.union (re.range "\u{09}" "\u{09}") (re.range " " " "))) (re.+ (re.range "0" "9"))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
