;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (&#217;|&#218;|&#219;|&#220;|&#249;|&#250;|&#251;|&#252;|&#181;|&amp;#085;|&amp;#117;|&amp;#181;|&amp;micro;|&amp;#217;|&amp;#218;|&amp;#219;|&amp;#220;|&amp;Ugrave;|&amp;Uacute;|&amp;Ucirc;|&amp;Uuml;|&amp;#249;|&amp;#250;|&amp;#251;&amp;#252;|&amp;ugrave;|&amp;uacute;|&amp;ucirc;|&amp;uuml;)
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "\u00A8&amp;uuml;z"
(define-fun Witness1 () String (seq.++ "\xa8" (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "u" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" (seq.++ "z" "")))))))))))))
;witness2: "\u00E3\x19&amp;#250;"
(define-fun Witness2 () String (seq.++ "\xe3" (seq.++ "\x19" (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "5" (seq.++ "0" (seq.++ ";" "")))))))))))))

(assert (= regexA (re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "7" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "8" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "9" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "0" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "9" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "5" (seq.++ "0" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "5" (seq.++ "1" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "5" (seq.++ "2" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "8" (seq.++ "1" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "8" (seq.++ "5" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "1" (seq.++ "7" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "8" (seq.++ "1" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "m" (seq.++ "i" (seq.++ "c" (seq.++ "r" (seq.++ "o" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "7" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "8" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "9" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "0" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "U" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "U" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "U" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "U" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "9" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "5" (seq.++ "0" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "5" (seq.++ "1" (seq.++ ";" (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "5" (seq.++ "2" (seq.++ ";" "")))))))))))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "u" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "u" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "u" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" "")))))))))))) (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "u" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" ""))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
