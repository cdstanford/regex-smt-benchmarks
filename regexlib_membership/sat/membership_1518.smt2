;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (&#161;|&#204;|&#205;|&#206;|&#207;|&#236;|&#237;|&#238;|&#239;|&amp;#033;|&amp;#161;|&amp;iexcl;|&amp;#185;|&amp;sup1;|&amp;brvbar;|&amp;Igrave;|&amp;Iacute;|&amp;Icirc;|&amp;Iuml;|&amp;igrave;|&amp;iacute;|&amp;iuml;|&amp;#204;|&amp;#205;|&amp;#206;|&amp;#207;|&amp;#236;|&amp;#237;|&amp;#238;|&amp;#239;|&amp;#073;|&amp;#105;)
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "&amp;Icirc;\u0088"
(define-fun Witness1 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" (str.++ "\u{88}" "")))))))))))))
;witness2: "&amp;#105;\u00B5"
(define-fun Witness2 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "0" (str.++ "5" (str.++ ";" (str.++ "\u{b5}" ""))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "6" (str.++ "1" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "3" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "6" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "e" (str.++ "x" (str.++ "c" (str.++ "l" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "8" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "s" (str.++ "u" (str.++ "p" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "b" (str.++ "r" (str.++ "v" (str.++ "b" (str.++ "a" (str.++ "r" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "I" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "i" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "0" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "8" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "3" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "7" (str.++ "3" (str.++ ";" ""))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "0" (str.++ "5" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
