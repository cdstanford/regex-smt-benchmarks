;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (&#161;|&#204;|&#205;|&#206;|&#207;|&#236;|&#237;|&#238;|&#239;|&amp;#033;|&amp;#161;|&amp;iexcl;|&amp;#185;|&amp;sup1;|&amp;brvbar;|&amp;Igrave;|&amp;Iacute;|&amp;Icirc;|&amp;Iuml;|&amp;igrave;|&amp;iacute;|&amp;iuml;|&amp;#204;|&amp;#205;|&amp;#206;|&amp;#207;|&amp;#236;|&amp;#237;|&amp;#238;|&amp;#239;|&amp;#073;|&amp;#105;)
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "&amp;Icirc;\u0088"
(define-fun Witness1 () String (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "I" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" (seq.++ "\x88" "")))))))))))))
;witness2: "&amp;#105;\u00B5"
(define-fun Witness2 () String (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "0" (seq.++ "5" (seq.++ ";" (seq.++ "\xb5" ""))))))))))))

(assert (= regexA (re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "6" (seq.++ "1" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "4" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "5" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "6" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "7" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "6" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "7" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "8" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "9" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "3" (seq.++ "3" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "6" (seq.++ "1" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "i" (seq.++ "e" (seq.++ "x" (seq.++ "c" (seq.++ "l" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "8" (seq.++ "5" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "s" (seq.++ "u" (seq.++ "p" (seq.++ "1" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "b" (seq.++ "r" (seq.++ "v" (seq.++ "b" (seq.++ "a" (seq.++ "r" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "I" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "I" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "I" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "I" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "i" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "i" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "i" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "4" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "5" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "6" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "0" (seq.++ "7" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "6" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "7" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "8" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "3" (seq.++ "9" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "7" (seq.++ "3" (seq.++ ";" ""))))))))))) (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "0" (seq.++ "5" (seq.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
