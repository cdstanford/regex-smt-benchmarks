;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (?:(?:[123]|I{1,3})\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon).?\s*(?:1?[0-9]?[0-9]):\s*\d{1,3}(?:[,-]\s*\d{1,3})*(?:;\s*(?:(?:[123]|I{1,3})\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon)?.?\s*(?:1?[0-9]?[0-9]):\s*\d{1,3}(?:[,-]\s*\d{1,3})*)*
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "I\u0090III\u00A0\u0085\xDSong of Songs\u00C488:\u00850;1 Song of Solomon14:\u00A0\u00A09, \u00A08\u0083`\u0093"
(define-fun Witness1 () String (str.++ "I" (str.++ "\u{90}" (str.++ "I" (str.++ "I" (str.++ "I" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0d}" (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" (str.++ "\u{c4}" (str.++ "8" (str.++ "8" (str.++ ":" (str.++ "\u{85}" (str.++ "0" (str.++ ";" (str.++ "1" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "l" (str.++ "o" (str.++ "m" (str.++ "o" (str.++ "n" (str.++ "1" (str.++ "4" (str.++ ":" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "9" (str.++ "," (str.++ " " (str.++ "\u{a0}" (str.++ "8" (str.++ "\u{83}" (str.++ "`" (str.++ "\u{93}" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "cSong of Songs\u00B3172:8\u008E"
(define-fun Witness2 () String (str.++ "c" (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" (str.++ "\u{b3}" (str.++ "1" (str.++ "7" (str.++ "2" (str.++ ":" (str.++ "8" (str.++ "\u{8e}" ""))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.union (re.range "1" "3") ((_ re.loop 1 3) (re.range "I" "I"))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.union (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.union (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" "")))))))))))))) (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "l" (str.++ "o" (str.++ "m" (str.++ "o" (str.++ "n" ""))))))))))))))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 1 3) (re.range "0" "9"))(re.++ (re.* (re.++ (re.range "," "-")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 1 3) (re.range "0" "9"))))) (re.* (re.++ (re.range ";" ";")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (re.range "1" "3") ((_ re.loop 1 3) (re.range "I" "I"))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.opt (re.union (re.++ (re.range "A" "Z") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z"))))(re.union (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ "s" "")))))))))))))) (str.to_re (str.++ "S" (str.++ "o" (str.++ "n" (str.++ "g" (str.++ " " (str.++ "o" (str.++ "f" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "l" (str.++ "o" (str.++ "m" (str.++ "o" (str.++ "n" "")))))))))))))))))))(re.++ (re.opt (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.range "1" "1"))(re.++ (re.opt (re.range "0" "9"))(re.++ (re.range "0" "9")(re.++ (re.range ":" ":")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.* (re.++ (re.range "," "-")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) ((_ re.loop 1 3) (re.range "0" "9")))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
