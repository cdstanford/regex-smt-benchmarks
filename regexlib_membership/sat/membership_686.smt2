;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = Pattern that matches all DVLA Vehicle Registration Marks (VRM). Allows for an optional single space between segments.
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "Pattern that matches all DVLA Vehicle Registration Marks VRM\u00CB Allows for an optional single space between segments\u00E7"
(define-fun Witness1 () String (str.++ "P" (str.++ "a" (str.++ "t" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "D" (str.++ "V" (str.++ "L" (str.++ "A" (str.++ " " (str.++ "V" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "c" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "R" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "k" (str.++ "s" (str.++ " " (str.++ "V" (str.++ "R" (str.++ "M" (str.++ "\u{cb}" (str.++ " " (str.++ "A" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "g" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "s" (str.++ "\u{e7}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "Pattern that matches all DVLA Vehicle Registration Marks VRM\u00C9 Allows for an optional single space between segments\u00EA"
(define-fun Witness2 () String (str.++ "P" (str.++ "a" (str.++ "t" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "D" (str.++ "V" (str.++ "L" (str.++ "A" (str.++ " " (str.++ "V" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "c" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "R" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "k" (str.++ "s" (str.++ " " (str.++ "V" (str.++ "R" (str.++ "M" (str.++ "\u{c9}" (str.++ " " (str.++ "A" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "g" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "s" (str.++ "\u{ea}" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (str.++ "P" (str.++ "a" (str.++ "t" (str.++ "t" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "t" (str.++ "h" (str.++ "a" (str.++ "t" (str.++ " " (str.++ "m" (str.++ "a" (str.++ "t" (str.++ "c" (str.++ "h" (str.++ "e" (str.++ "s" (str.++ " " (str.++ "a" (str.++ "l" (str.++ "l" (str.++ " " (str.++ "D" (str.++ "V" (str.++ "L" (str.++ "A" (str.++ " " (str.++ "V" (str.++ "e" (str.++ "h" (str.++ "i" (str.++ "c" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "R" (str.++ "e" (str.++ "g" (str.++ "i" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ " " (str.++ "M" (str.++ "a" (str.++ "r" (str.++ "k" (str.++ "s" (str.++ " " ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (str.to_re (str.++ "V" (str.++ "R" (str.++ "M" ""))))(re.++ (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))(re.++ (str.to_re (str.++ " " (str.++ "A" (str.++ "l" (str.++ "l" (str.++ "o" (str.++ "w" (str.++ "s" (str.++ " " (str.++ "f" (str.++ "o" (str.++ "r" (str.++ " " (str.++ "a" (str.++ "n" (str.++ " " (str.++ "o" (str.++ "p" (str.++ "t" (str.++ "i" (str.++ "o" (str.++ "n" (str.++ "a" (str.++ "l" (str.++ " " (str.++ "s" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "l" (str.++ "e" (str.++ " " (str.++ "s" (str.++ "p" (str.++ "a" (str.++ "c" (str.++ "e" (str.++ " " (str.++ "b" (str.++ "e" (str.++ "t" (str.++ "w" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ " " (str.++ "s" (str.++ "e" (str.++ "g" (str.++ "m" (str.++ "e" (str.++ "n" (str.++ "t" (str.++ "s" "")))))))))))))))))))))))))))))))))))))))))))))))))))))) (re.union (re.range "\u{00}" "\u{09}") (re.range "\u{0b}" "\u{ff}"))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
