;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = Pattern that matches all DVLA Vehicle Registration Marks (VRM). Allows for an optional single space between segments.
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "Pattern that matches all DVLA Vehicle Registration Marks VRM\u00CB Allows for an optional single space between segments\u00E7"
(define-fun Witness1 () String (seq.++ "P" (seq.++ "a" (seq.++ "t" (seq.++ "t" (seq.++ "e" (seq.++ "r" (seq.++ "n" (seq.++ " " (seq.++ "t" (seq.++ "h" (seq.++ "a" (seq.++ "t" (seq.++ " " (seq.++ "m" (seq.++ "a" (seq.++ "t" (seq.++ "c" (seq.++ "h" (seq.++ "e" (seq.++ "s" (seq.++ " " (seq.++ "a" (seq.++ "l" (seq.++ "l" (seq.++ " " (seq.++ "D" (seq.++ "V" (seq.++ "L" (seq.++ "A" (seq.++ " " (seq.++ "V" (seq.++ "e" (seq.++ "h" (seq.++ "i" (seq.++ "c" (seq.++ "l" (seq.++ "e" (seq.++ " " (seq.++ "R" (seq.++ "e" (seq.++ "g" (seq.++ "i" (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "a" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" (seq.++ " " (seq.++ "M" (seq.++ "a" (seq.++ "r" (seq.++ "k" (seq.++ "s" (seq.++ " " (seq.++ "V" (seq.++ "R" (seq.++ "M" (seq.++ "\xcb" (seq.++ " " (seq.++ "A" (seq.++ "l" (seq.++ "l" (seq.++ "o" (seq.++ "w" (seq.++ "s" (seq.++ " " (seq.++ "f" (seq.++ "o" (seq.++ "r" (seq.++ " " (seq.++ "a" (seq.++ "n" (seq.++ " " (seq.++ "o" (seq.++ "p" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" (seq.++ "a" (seq.++ "l" (seq.++ " " (seq.++ "s" (seq.++ "i" (seq.++ "n" (seq.++ "g" (seq.++ "l" (seq.++ "e" (seq.++ " " (seq.++ "s" (seq.++ "p" (seq.++ "a" (seq.++ "c" (seq.++ "e" (seq.++ " " (seq.++ "b" (seq.++ "e" (seq.++ "t" (seq.++ "w" (seq.++ "e" (seq.++ "e" (seq.++ "n" (seq.++ " " (seq.++ "s" (seq.++ "e" (seq.++ "g" (seq.++ "m" (seq.++ "e" (seq.++ "n" (seq.++ "t" (seq.++ "s" (seq.++ "\xe7" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "Pattern that matches all DVLA Vehicle Registration Marks VRM\u00C9 Allows for an optional single space between segments\u00EA"
(define-fun Witness2 () String (seq.++ "P" (seq.++ "a" (seq.++ "t" (seq.++ "t" (seq.++ "e" (seq.++ "r" (seq.++ "n" (seq.++ " " (seq.++ "t" (seq.++ "h" (seq.++ "a" (seq.++ "t" (seq.++ " " (seq.++ "m" (seq.++ "a" (seq.++ "t" (seq.++ "c" (seq.++ "h" (seq.++ "e" (seq.++ "s" (seq.++ " " (seq.++ "a" (seq.++ "l" (seq.++ "l" (seq.++ " " (seq.++ "D" (seq.++ "V" (seq.++ "L" (seq.++ "A" (seq.++ " " (seq.++ "V" (seq.++ "e" (seq.++ "h" (seq.++ "i" (seq.++ "c" (seq.++ "l" (seq.++ "e" (seq.++ " " (seq.++ "R" (seq.++ "e" (seq.++ "g" (seq.++ "i" (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "a" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" (seq.++ " " (seq.++ "M" (seq.++ "a" (seq.++ "r" (seq.++ "k" (seq.++ "s" (seq.++ " " (seq.++ "V" (seq.++ "R" (seq.++ "M" (seq.++ "\xc9" (seq.++ " " (seq.++ "A" (seq.++ "l" (seq.++ "l" (seq.++ "o" (seq.++ "w" (seq.++ "s" (seq.++ " " (seq.++ "f" (seq.++ "o" (seq.++ "r" (seq.++ " " (seq.++ "a" (seq.++ "n" (seq.++ " " (seq.++ "o" (seq.++ "p" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" (seq.++ "a" (seq.++ "l" (seq.++ " " (seq.++ "s" (seq.++ "i" (seq.++ "n" (seq.++ "g" (seq.++ "l" (seq.++ "e" (seq.++ " " (seq.++ "s" (seq.++ "p" (seq.++ "a" (seq.++ "c" (seq.++ "e" (seq.++ " " (seq.++ "b" (seq.++ "e" (seq.++ "t" (seq.++ "w" (seq.++ "e" (seq.++ "e" (seq.++ "n" (seq.++ " " (seq.++ "s" (seq.++ "e" (seq.++ "g" (seq.++ "m" (seq.++ "e" (seq.++ "n" (seq.++ "t" (seq.++ "s" (seq.++ "\xea" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (seq.++ "P" (seq.++ "a" (seq.++ "t" (seq.++ "t" (seq.++ "e" (seq.++ "r" (seq.++ "n" (seq.++ " " (seq.++ "t" (seq.++ "h" (seq.++ "a" (seq.++ "t" (seq.++ " " (seq.++ "m" (seq.++ "a" (seq.++ "t" (seq.++ "c" (seq.++ "h" (seq.++ "e" (seq.++ "s" (seq.++ " " (seq.++ "a" (seq.++ "l" (seq.++ "l" (seq.++ " " (seq.++ "D" (seq.++ "V" (seq.++ "L" (seq.++ "A" (seq.++ " " (seq.++ "V" (seq.++ "e" (seq.++ "h" (seq.++ "i" (seq.++ "c" (seq.++ "l" (seq.++ "e" (seq.++ " " (seq.++ "R" (seq.++ "e" (seq.++ "g" (seq.++ "i" (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "a" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" (seq.++ " " (seq.++ "M" (seq.++ "a" (seq.++ "r" (seq.++ "k" (seq.++ "s" (seq.++ " " ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(re.++ (str.to_re (seq.++ "V" (seq.++ "R" (seq.++ "M" ""))))(re.++ (re.union (re.range "\x00" "\x09") (re.range "\x0b" "\xff"))(re.++ (str.to_re (seq.++ " " (seq.++ "A" (seq.++ "l" (seq.++ "l" (seq.++ "o" (seq.++ "w" (seq.++ "s" (seq.++ " " (seq.++ "f" (seq.++ "o" (seq.++ "r" (seq.++ " " (seq.++ "a" (seq.++ "n" (seq.++ " " (seq.++ "o" (seq.++ "p" (seq.++ "t" (seq.++ "i" (seq.++ "o" (seq.++ "n" (seq.++ "a" (seq.++ "l" (seq.++ " " (seq.++ "s" (seq.++ "i" (seq.++ "n" (seq.++ "g" (seq.++ "l" (seq.++ "e" (seq.++ " " (seq.++ "s" (seq.++ "p" (seq.++ "a" (seq.++ "c" (seq.++ "e" (seq.++ " " (seq.++ "b" (seq.++ "e" (seq.++ "t" (seq.++ "w" (seq.++ "e" (seq.++ "e" (seq.++ "n" (seq.++ " " (seq.++ "s" (seq.++ "e" (seq.++ "g" (seq.++ "m" (seq.++ "e" (seq.++ "n" (seq.++ "t" (seq.++ "s" "")))))))))))))))))))))))))))))))))))))))))))))))))))))) (re.union (re.range "\x00" "\x09") (re.range "\x0b" "\xff"))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
