;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((http|HTTP|https|HTTPS|ftp|FTP?)\:\/\/)?((www|WWW)+\.)+(([0-9]{1,3}){3}[0-9]{1,3}\.|([\w!~*'()-]+\.)*([\w^-][\w-]{0,61})?[\w]\.[a-z]{2,6})(:[0-9]{1,4})?((\/*)|(\/+[\w!~*'().;?:@&=+$,%#-]+)+\/*)$
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "FT://WWWwww.WWWwww.WWWwwwwww.39909409.:0"
(define-fun Witness1 () String (str.++ "F" (str.++ "T" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "3" (str.++ "9" (str.++ "9" (str.++ "0" (str.++ "9" (str.++ "4" (str.++ "0" (str.++ "9" (str.++ "." (str.++ ":" (str.++ "0" "")))))))))))))))))))))))))))))))))))))))))
;witness2: "WWW.wwwwww.www.wwwWWWwww.WWW.WWW.819659.:1"
(define-fun Witness2 () String (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "w" (str.++ "w" (str.++ "w" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "W" (str.++ "W" (str.++ "W" (str.++ "." (str.++ "8" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ "5" (str.++ "9" (str.++ "." (str.++ ":" (str.++ "1" "")))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.union (str.to_re (str.++ "H" (str.++ "T" (str.++ "T" (str.++ "P" "")))))(re.union (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" ""))))))(re.union (str.to_re (str.++ "H" (str.++ "T" (str.++ "T" (str.++ "P" (str.++ "S" ""))))))(re.union (str.to_re (str.++ "f" (str.++ "t" (str.++ "p" "")))) (re.++ (str.to_re (str.++ "F" (str.++ "T" ""))) (re.opt (re.range "P" "P")))))))) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" ""))))))(re.++ (re.+ (re.++ (re.+ (re.union (str.to_re (str.++ "w" (str.++ "w" (str.++ "w" "")))) (str.to_re (str.++ "W" (str.++ "W" (str.++ "W" "")))))) (re.range "." ".")))(re.++ (re.union (re.++ ((_ re.loop 3 3) ((_ re.loop 1 3) (re.range "0" "9")))(re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.range "." "."))) (re.++ (re.* (re.++ (re.+ (re.union (re.range "!" "!")(re.union (re.range "'" "*")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))) (re.range "." ".")))(re.++ (re.opt (re.++ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "^" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) ((_ re.loop 0 61) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.range "." ".") ((_ re.loop 2 6) (re.range "a" "z")))))))(re.++ (re.opt (re.++ (re.range ":" ":") ((_ re.loop 1 4) (re.range "0" "9"))))(re.++ (re.union (re.* (re.range "/" "/")) (re.++ (re.+ (re.++ (re.+ (re.range "/" "/")) (re.+ (re.union (re.range "!" "!")(re.union (re.range "#" ".")(re.union (re.range "0" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))) (re.* (re.range "/" "/")))) (str.to_re "")))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
