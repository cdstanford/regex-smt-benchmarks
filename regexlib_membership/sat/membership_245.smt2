;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^(A(D|E|F|G|I|L|M|N|O|R|S|T|Q|U|W|X|Z)|B(A|B|D|E|F|G|H|I|J|L|M|N|O|R|S|T|V|W|Y|Z)|C(A|C|D|F|G|H|I|K|L|M|N|O|R|U|V|X|Y|Z)|D(E|J|K|M|O|Z)|E(C|E|G|H|R|S|T)|F(I|J|K|M|O|R)|G(A|B|D|E|F|G|H|I|L|M|N|P|Q|R|S|T|U|W|Y)|H(K|M|N|R|T|U)|I(D|E|Q|L|M|N|O|R|S|T)|J(E|M|O|P)|K(E|G|H|I|M|N|P|R|W|Y|Z)|L(A|B|C|I|K|R|S|T|U|V|Y)|M(A|C|D|E|F|G|H|K|L|M|N|O|Q|P|R|S|T|U|V|W|X|Y|Z)|N(A|C|E|F|G|I|L|O|P|R|U|Z)|OM|P(A|E|F|G|H|K|L|M|N|R|S|T|W|Y)|QA|R(E|O|S|U|W)|S(A|B|C|D|E|G|H|I|J|K|L|M|N|O|R|T|V|Y|Z)|T(C|D|F|G|H|J|K|L|M|N|O|R|T|V|W|Z)|U(A|G|M|S|Y|Z)|V(A|C|E|G|I|N|U)|W(F|S)|Y(E|T)|Z(A|M|W))$
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "IR"
(define-fun Witness1 () String (str.++ "I" (str.++ "R" "")))
;witness2: "BZ"
(define-fun Witness2 () String (str.++ "B" (str.++ "Z" "")))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "D" "G")(re.union (re.range "I" "I")(re.union (re.range "L" "O")(re.union (re.range "Q" "U")(re.union (re.range "W" "X") (re.range "Z" "Z")))))))(re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "B")(re.union (re.range "D" "J")(re.union (re.range "L" "O")(re.union (re.range "R" "T")(re.union (re.range "V" "W") (re.range "Y" "Z")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "A")(re.union (re.range "C" "D")(re.union (re.range "F" "I")(re.union (re.range "K" "O")(re.union (re.range "R" "R")(re.union (re.range "U" "V") (re.range "X" "Z"))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "E" "E")(re.union (re.range "J" "K")(re.union (re.range "M" "M")(re.union (re.range "O" "O") (re.range "Z" "Z"))))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "C" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "H") (re.range "R" "T")))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "I" "K")(re.union (re.range "M" "M")(re.union (re.range "O" "O") (re.range "R" "R")))))(re.union (re.++ (re.range "G" "G") (re.union (re.range "A" "B")(re.union (re.range "D" "I")(re.union (re.range "L" "N")(re.union (re.range "P" "U")(re.union (re.range "W" "W") (re.range "Y" "Y")))))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "K" "K")(re.union (re.range "M" "N")(re.union (re.range "R" "R") (re.range "T" "U")))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "D" "E")(re.union (re.range "L" "O") (re.range "Q" "T"))))(re.union (re.++ (re.range "J" "J") (re.union (re.range "E" "E")(re.union (re.range "M" "M") (re.range "O" "P"))))(re.union (re.++ (re.range "K" "K") (re.union (re.range "E" "E")(re.union (re.range "G" "I")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R")(re.union (re.range "W" "W") (re.range "Y" "Z"))))))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "A" "C")(re.union (re.range "I" "I")(re.union (re.range "K" "K")(re.union (re.range "R" "V") (re.range "Y" "Y"))))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "A" "A")(re.union (re.range "C" "H") (re.range "K" "Z"))))(re.union (re.++ (re.range "N" "N") (re.union (re.range "A" "A")(re.union (re.range "C" "C")(re.union (re.range "E" "G")(re.union (re.range "I" "I")(re.union (re.range "L" "L")(re.union (re.range "O" "P")(re.union (re.range "R" "R")(re.union (re.range "U" "U") (re.range "Z" "Z"))))))))))(re.union (str.to_re (str.++ "O" (str.++ "M" "")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "H")(re.union (re.range "K" "N")(re.union (re.range "R" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))))(re.union (str.to_re (str.++ "Q" (str.++ "A" "")))(re.union (re.++ (re.range "R" "R") (re.union (re.range "E" "E")(re.union (re.range "O" "O")(re.union (re.range "S" "S")(re.union (re.range "U" "U") (re.range "W" "W"))))))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "E")(re.union (re.range "G" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T")(re.union (re.range "V" "V") (re.range "Y" "Z")))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "C" "D")(re.union (re.range "F" "H")(re.union (re.range "J" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T")(re.union (re.range "V" "W") (re.range "Z" "Z"))))))))(re.union (re.++ (re.range "U" "U") (re.union (re.range "A" "A")(re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "S" "S") (re.range "Y" "Z"))))))(re.union (re.++ (re.range "V" "V") (re.union (re.range "A" "A")(re.union (re.range "C" "C")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "I" "I")(re.union (re.range "N" "N") (re.range "U" "U"))))))))(re.union (re.++ (re.range "W" "W") (re.union (re.range "F" "F") (re.range "S" "S")))(re.union (re.++ (re.range "Y" "Y") (re.union (re.range "E" "E") (re.range "T" "T"))) (re.++ (re.range "Z" "Z") (re.union (re.range "A" "A")(re.union (re.range "M" "M") (re.range "W" "W")))))))))))))))))))))))))))) (str.to_re "")))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
