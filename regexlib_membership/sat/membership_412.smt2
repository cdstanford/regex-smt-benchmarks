;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (http):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+(\\.[\\w\\-_]+)(\\/)([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#]+)(\\/)((\\d{8}-)|(\\d{9}-)|(\\d{10}-)|(\\d{11}-))+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?+html^])?
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "http:\/\/www\rw\\Xww]\/+;;\/\ddddddddddd-\ddddddddd-\ddddddddddd-\ddddddddddd-\ddddddddd-\dddddddddd-\dddddddd-\ddddddddddd-"
(define-fun Witness1 () String (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ ":" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "/" (seq.++ "w" (seq.++ "w" (seq.++ "w" (seq.++ "\x5c" (seq.++ "r" (seq.++ "w" (seq.++ "\x5c" (seq.++ "\x5c" (seq.++ "X" (seq.++ "w" (seq.++ "w" (seq.++ "]" (seq.++ "\x5c" (seq.++ "/" (seq.++ "+" (seq.++ ";" (seq.++ ";" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "http:\/\/^\\u00C2w\\u00DA_\\\u00C8w\yw\/@\/\ddddddddddd-\ddddddddddd-\ddddddddddd-\x13\u0095"
(define-fun Witness2 () String (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ ":" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "/" (seq.++ "^" (seq.++ "\x5c" (seq.++ "\xc2" (seq.++ "w" (seq.++ "\x5c" (seq.++ "\xda" (seq.++ "_" (seq.++ "\x5c" (seq.++ "\x5c" (seq.++ "\xc8" (seq.++ "w" (seq.++ "\x5c" (seq.++ "y" (seq.++ "w" (seq.++ "\x5c" (seq.++ "/" (seq.++ "@" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x5c" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "d" (seq.++ "-" (seq.++ "\x13" (seq.++ "\x95" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" "")))))(re.++ (str.to_re (seq.++ ":" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "/" ""))))))(re.++ (re.+ (re.union (re.range "\x5c" "_") (re.range "w" "w")))(re.++ (re.+ (re.++ (re.range "\x5c" "\x5c")(re.++ (re.union (re.range "\x00" "\x09") (re.range "\x0b" "\xff")) (re.+ (re.union (re.range "\x5c" "_") (re.range "w" "w"))))))(re.++ (re.++ (re.range "\x5c" "\x5c")(re.++ (re.union (re.range "\x00" "\x09") (re.range "\x0b" "\xff")) (re.+ (re.union (re.range "\x5c" "_") (re.range "w" "w")))))(re.++ (str.to_re (seq.++ "\x5c" (seq.++ "/" "")))(re.++ (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" ",")(re.union (re.range "." "/")(re.union (re.range ":" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "@")(re.union (re.range "\x5c" "\x5c")(re.union (re.range "^" "^")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p")(re.union (re.range "w" "w") (re.range "~" "~"))))))))))))))) (re.+ (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" "+")(re.union (re.range "/" "/")(re.union (re.range ";" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "@")(re.union (re.range "\x5c" "\x5c")(re.union (re.range "^" "^")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p")(re.union (re.range "w" "w") (re.range "~" "~"))))))))))))))))(re.++ (str.to_re (seq.++ "\x5c" (seq.++ "/" "")))(re.++ (re.+ (re.union (re.++ (re.range "\x5c" "\x5c")(re.++ ((_ re.loop 8 8) (re.range "d" "d")) (re.range "-" "-")))(re.union (re.++ (re.range "\x5c" "\x5c")(re.++ ((_ re.loop 9 9) (re.range "d" "d")) (re.range "-" "-")))(re.union (re.++ (re.range "\x5c" "\x5c")(re.++ ((_ re.loop 10 10) (re.range "d" "d")) (re.range "-" "-"))) (re.++ (re.range "\x5c" "\x5c")(re.++ ((_ re.loop 11 11) (re.range "d" "d")) (re.range "-" "-"))))))) (re.opt (re.++ (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "+" ",")(re.union (re.range "." "/")(re.union (re.range ":" ";")(re.union (re.range "=" "=")(re.union (re.range "?" "@")(re.union (re.range "\x5c" "\x5c")(re.union (re.range "^" "^")(re.union (re.range "a" "a")(re.union (re.range "m" "m")(re.union (re.range "p" "p")(re.union (re.range "w" "w") (re.range "~" "~"))))))))))))))) (re.union (re.range "+" "+")(re.union (re.range "?" "@")(re.union (re.range "\x5c" "\x5c")(re.union (re.range "^" "^")(re.union (re.range "h" "h")(re.union (re.range "l" "m")(re.union (re.range "t" "t") (re.range "w" "w")))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
