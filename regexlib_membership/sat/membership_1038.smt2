;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (\s)*(int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*(\s)*(\()(\s)*((int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*((\s)*[,](\s)*(int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*)*)?(\s)*(\))(\s)*;
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: " \u00A0string& r( \u0085char  \xD  i9\u0085)\u00A0;"
(define-fun Witness1 () String (str.++ " " (str.++ "\u{a0}" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ "&" (str.++ " " (str.++ "r" (str.++ "(" (str.++ " " (str.++ "\u{85}" (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ " " (str.++ " " (str.++ "\u{0d}" (str.++ " " (str.++ " " (str.++ "i" (str.++ "9" (str.++ "\u{85}" (str.++ ")" (str.++ "\u{a0}" (str.++ ";" ""))))))))))))))))))))))))))))))
;witness2: " char\u0085\xC g\u0085\u0085(double  \xC\xDeh) ;"
(define-fun Witness2 () String (str.++ " " (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" (str.++ "\u{85}" (str.++ "\u{0c}" (str.++ " " (str.++ "g" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ "(" (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" (str.++ " " (str.++ " " (str.++ "\u{0c}" (str.++ "\u{0d}" (str.++ "e" (str.++ "h" (str.++ ")" (str.++ " " (str.++ ";" ""))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "v" (str.++ "o" (str.++ "i" (str.++ "d" "")))))(re.union (str.to_re (str.++ "f" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" "")))))(re.union (str.to_re (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" ""))))))) (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))(re.++ (re.* (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.range "*" "*")))(re.++ (re.opt (re.range "&" "&"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "a" "z")(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z")))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "(" "(")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "v" (str.++ "o" (str.++ "i" (str.++ "d" "")))))(re.union (str.to_re (str.++ "f" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" "")))))(re.union (str.to_re (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" ""))))))) (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))(re.++ (re.* (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.range "*" "*")))(re.++ (re.opt (re.range "&" "&"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "a" "z")(re.++ (re.* (re.union (re.range "0" "9") (re.range "a" "z"))) (re.* (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "," ",")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "t" ""))))(re.union (str.to_re (str.++ "v" (str.++ "o" (str.++ "i" (str.++ "d" "")))))(re.union (str.to_re (str.++ "f" (str.++ "l" (str.++ "o" (str.++ "a" (str.++ "t" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "h" (str.++ "a" (str.++ "r" "")))))(re.union (str.to_re (str.++ "d" (str.++ "o" (str.++ "u" (str.++ "b" (str.++ "l" (str.++ "e" ""))))))) (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" ""))))))))))))(re.++ (re.* (re.union (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.range "*" "*")))(re.++ (re.opt (re.range "&" "&"))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range "a" "z") (re.* (re.union (re.range "0" "9") (re.range "a" "z")))))))))))))))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.range ")" ")")(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range ";" ";")))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
