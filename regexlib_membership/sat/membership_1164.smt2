;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "g`\x1DR\u0097cm"
(define-fun Witness1 () String (str.++ "g" (str.++ "`" (str.++ "\u{1d}" (str.++ "R" (str.++ "\u{97}" (str.++ "c" (str.++ "m" ""))))))))
;witness2: "tp"
(define-fun Witness2 () String (str.++ "t" (str.++ "p" "")))

(assert (= regexA (re.union (re.++ (re.range "a" "a") (re.union (re.union (re.range "c" "g")(re.union (re.range "i" "i")(re.union (re.range "l" "o")(re.union (re.range "q" "u")(re.union (re.range "w" "x") (re.range "z" "z"))))))(re.union (str.to_re (str.++ "e" (str.++ "r" (str.++ "o" "")))) (re.++ (re.union (str.to_re (str.++ "r" (str.++ "p" ""))) (str.to_re (str.++ "s" (str.++ "i" "")))) (re.range "a" "a")))))(re.union (re.++ (re.range "b" "b")(re.++ (re.union (re.range "a" "b")(re.union (re.range "d" "j")(re.union (re.range "m" "o")(re.union (re.range "r" "t")(re.union (re.range "v" "w") (re.range "y" "z")))))) (str.to_re (str.++ "i" (str.++ "z" "")))))(re.union (re.++ (re.range "c" "c") (re.union (re.union (re.range "a" "a")(re.union (re.range "c" "d")(re.union (re.range "f" "i")(re.union (re.range "k" "o")(re.union (re.range "r" "r")(re.union (re.range "u" "v") (re.range "x" "z")))))))(re.union (str.to_re (str.++ "a" (str.++ "t" ""))) (re.++ (re.range "o" "o") (re.union (re.range "m" "m") (str.to_re (str.++ "o" (str.++ "p" ""))))))))(re.union (re.++ (re.range "d" "d") (re.union (re.range "e" "e")(re.union (re.range "j" "k")(re.union (re.range "m" "m")(re.union (re.range "o" "o") (re.range "z" "z"))))))(re.union (re.++ (re.range "e" "e") (re.union (re.union (re.range "c" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "h") (re.range "r" "u")))) (str.to_re (str.++ "d" (str.++ "u" "")))))(re.union (re.++ (re.range "f" "f") (re.union (re.range "i" "k")(re.union (re.range "m" "m")(re.union (re.range "o" "o") (re.range "r" "r")))))(re.union (re.++ (re.range "g" "g") (re.union (re.union (re.range "a" "b")(re.union (re.range "d" "i")(re.union (re.range "l" "n")(re.union (re.range "p" "u")(re.union (re.range "w" "w") (re.range "y" "y")))))) (str.to_re (str.++ "o" (str.++ "v" "")))))(re.union (re.++ (re.range "h" "h") (re.union (re.range "k" "k")(re.union (re.range "m" "n")(re.union (re.range "r" "r") (re.range "t" "u")))))(re.union (re.++ (re.range "i" "i") (re.union (re.union (re.range "d" "e")(re.union (re.range "l" "o") (re.range "q" "t"))) (re.++ (re.range "n" "n") (re.union (str.to_re (str.++ "f" (str.++ "o" ""))) (re.range "t" "t")))))(re.union (re.++ (re.range "j" "j") (re.union (re.union (re.range "e" "e")(re.union (re.range "m" "m") (re.range "o" "p"))) (str.to_re (str.++ "o" (str.++ "b" (str.++ "s" ""))))))(re.union (re.++ (re.range "k" "k") (re.union (re.range "e" "e")(re.union (re.range "g" "i")(re.union (re.range "m" "n")(re.union (re.range "p" "p")(re.union (re.range "r" "r")(re.union (re.range "w" "w") (re.range "y" "z"))))))))(re.union (re.++ (re.range "l" "l") (re.union (re.range "a" "c")(re.union (re.range "i" "i")(re.union (re.range "k" "k")(re.union (re.range "r" "v") (re.range "y" "y"))))))(re.union (re.++ (re.range "m" "m") (re.union (re.union (re.range "a" "a")(re.union (re.range "c" "e")(re.union (re.range "g" "h") (re.range "k" "z"))))(re.union (str.to_re (str.++ "i" (str.++ "l" "")))(re.union (str.to_re (str.++ "o" (str.++ "b" (str.++ "i" "")))) (str.to_re (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))))))(re.union (re.++ (re.range "n" "n") (re.union (re.union (re.range "a" "a")(re.union (re.range "c" "c")(re.union (re.range "e" "g")(re.union (re.range "i" "i")(re.union (re.range "l" "l")(re.union (re.range "o" "p")(re.union (re.range "r" "r")(re.union (re.range "u" "u") (re.range "z" "z")))))))))(re.union (str.to_re (str.++ "a" (str.++ "m" (str.++ "e" "")))) (str.to_re (str.++ "e" (str.++ "t" ""))))))(re.union (re.++ (re.range "o" "o") (re.union (re.range "m" "m") (str.to_re (str.++ "r" (str.++ "g" "")))))(re.union (re.++ (re.range "p" "p") (re.union (re.union (re.range "a" "a")(re.union (re.range "e" "h")(re.union (re.range "k" "n")(re.union (re.range "r" "t")(re.union (re.range "w" "w") (re.range "y" "y")))))) (str.to_re (str.++ "r" (str.++ "o" "")))))(re.union (str.to_re (str.++ "q" (str.++ "a" "")))(re.union (re.++ (re.range "r" "r") (re.union (re.range "e" "e")(re.union (re.range "o" "o")(re.union (re.range "s" "s")(re.union (re.range "u" "u") (re.range "w" "w"))))))(re.union (re.++ (re.range "s" "s") (re.union (re.range "a" "e")(re.union (re.range "g" "o")(re.union (re.range "r" "r")(re.union (re.range "t" "v") (re.range "y" "z"))))))(re.union (re.++ (re.range "t" "t") (re.union (re.union (re.range "c" "d")(re.union (re.range "f" "h")(re.union (re.range "j" "p")(re.union (re.range "r" "r")(re.union (re.range "t" "t")(re.union (re.range "v" "w") (re.range "z" "z"))))))) (re.++ (re.opt (str.to_re (str.++ "r" (str.++ "a" (str.++ "v" ""))))) (str.to_re (str.++ "e" (str.++ "l" ""))))))(re.union (re.++ (re.range "u" "u") (re.union (re.range "a" "a")(re.union (re.range "g" "g")(re.union (re.range "k" "k")(re.union (re.range "m" "m")(re.union (re.range "s" "s") (re.range "y" "z")))))))(re.union (re.++ (re.range "v" "v") (re.union (re.range "a" "a")(re.union (re.range "c" "c")(re.union (re.range "e" "e")(re.union (re.range "g" "g")(re.union (re.range "i" "i")(re.union (re.range "n" "n") (re.range "u" "u"))))))))(re.union (re.++ (re.range "w" "w") (re.union (re.range "f" "f") (re.range "s" "s")))(re.union (re.++ (re.range "y" "y") (re.union (re.range "e" "e") (re.range "t" "u"))) (re.++ (re.range "z" "z") (re.union (re.range "a" "a")(re.union (re.range "m" "m") (re.range "w" "w"))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
