;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (([\w]+:)?//)?(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "\x2 //Z\u00BA.fB.\u00C3\u00AA3w:9#Z"
(define-fun Witness1 () String (str.++ "\u{02}" (str.++ " " (str.++ "/" (str.++ "/" (str.++ "Z" (str.++ "\u{ba}" (str.++ "." (str.++ "f" (str.++ "B" (str.++ "." (str.++ "\u{c3}" (str.++ "\u{aa}" (str.++ "3" (str.++ "w" (str.++ ":" (str.++ "9" (str.++ "#" (str.++ "Z" "")))))))))))))))))))
;witness2: "\u00E1//%fP\u00AA\u00AA%32z%2S%X\%J9\u00AA:%8f\u00B5@1\u00FC.18.\u00F65\u00C4\u00DC:3#"
(define-fun Witness2 () String (str.++ "\u{e1}" (str.++ "/" (str.++ "/" (str.++ "%" (str.++ "f" (str.++ "P" (str.++ "\u{aa}" (str.++ "\u{aa}" (str.++ "%" (str.++ "3" (str.++ "2" (str.++ "z" (str.++ "%" (str.++ "2" (str.++ "S" (str.++ "%" (str.++ "X" (str.++ "\u{5c}" (str.++ "%" (str.++ "J" (str.++ "9" (str.++ "\u{aa}" (str.++ ":" (str.++ "%" (str.++ "8" (str.++ "f" (str.++ "\u{b5}" (str.++ "@" (str.++ "1" (str.++ "\u{fc}" (str.++ "." (str.++ "1" (str.++ "8" (str.++ "." (str.++ "\u{f6}" (str.++ "5" (str.++ "\u{c4}" (str.++ "\u{dc}" (str.++ ":" (str.++ "3" (str.++ "#" ""))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.opt (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range ":" ":"))) (str.to_re (str.++ "/" (str.++ "/" "")))))(re.++ (re.opt (re.++ (re.+ (re.union (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f"))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.union (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f")))))))) (re.range "@" "@"))))(re.++ (re.+ (re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ ((_ re.loop 0 253) (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))) (re.range "." ".")))))(re.++ ((_ re.loop 2 4) (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.++ (re.range ":" ":") (re.+ (re.range "0" "9"))))(re.++ (re.* (re.++ (re.range "/" "/") (re.* (re.union (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f"))))))))(re.++ (re.opt (re.++ (re.range "?" "?") (re.* (re.++ (re.opt (re.range "&" "&"))(re.++ (re.union (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f"))))) (re.opt (re.range "=" "="))))))) (re.opt (re.++ (re.range "#" "#") (re.* (re.union (re.union (re.range "+" "+")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "~" "~")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))) (re.++ (re.range "%" "%") ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "f")))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
