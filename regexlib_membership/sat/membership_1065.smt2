;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((CN=(['\w\d\s\-\&amp;\.]+(\\/)*(\\,)*)+,\s*)*(OU=(['\w\d\s\-\&amp;\.]+(\\/)*(\\,)*)+,\s*)*(DC=['\w\d\s\-\&amp;]+[,]*\s*){1,}(DC=['\w\d\s\-\&amp;]+\s*){1})$
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "OU=_\u00CB\/,DC=q\u0085\u00A0DC=\u00A03DC=\u00CD,DC=\xC\u0085,DC=h\u00A0"
(define-fun Witness1 () String (seq.++ "O" (seq.++ "U" (seq.++ "=" (seq.++ "_" (seq.++ "\xcb" (seq.++ "\x5c" (seq.++ "/" (seq.++ "," (seq.++ "D" (seq.++ "C" (seq.++ "=" (seq.++ "q" (seq.++ "\x85" (seq.++ "\xa0" (seq.++ "D" (seq.++ "C" (seq.++ "=" (seq.++ "\xa0" (seq.++ "3" (seq.++ "D" (seq.++ "C" (seq.++ "=" (seq.++ "\xcd" (seq.++ "," (seq.++ "D" (seq.++ "C" (seq.++ "=" (seq.++ "\x0c" (seq.++ "\x85" (seq.++ "," (seq.++ "D" (seq.++ "C" (seq.++ "=" (seq.++ "h" (seq.++ "\xa0" ""))))))))))))))))))))))))))))))))))))
;witness2: "CN=\u00DC5y\/\/\/\/,\u0085\u00A0 OU=\u00BA\u00D6.\/;\,R\u0085\/\/,DC=K\xD\u00E0\u00DB \u00A0\xBDC=4"
(define-fun Witness2 () String (seq.++ "C" (seq.++ "N" (seq.++ "=" (seq.++ "\xdc" (seq.++ "5" (seq.++ "y" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "/" (seq.++ "," (seq.++ "\x85" (seq.++ "\xa0" (seq.++ " " (seq.++ "O" (seq.++ "U" (seq.++ "=" (seq.++ "\xba" (seq.++ "\xd6" (seq.++ "." (seq.++ "\x5c" (seq.++ "/" (seq.++ ";" (seq.++ "\x5c" (seq.++ "," (seq.++ "R" (seq.++ "\x85" (seq.++ "\x5c" (seq.++ "/" (seq.++ "\x5c" (seq.++ "/" (seq.++ "," (seq.++ "D" (seq.++ "C" (seq.++ "=" (seq.++ "K" (seq.++ "\x0d" (seq.++ "\xe0" (seq.++ "\xdb" (seq.++ " " (seq.++ "\xa0" (seq.++ "\x0b" (seq.++ "D" (seq.++ "C" (seq.++ "=" (seq.++ "4" "")))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.++ (str.to_re (seq.++ "C" (seq.++ "N" (seq.++ "=" ""))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\x85" "\x85")(re.union (re.range "\xa0" "\xa0")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))))))))))(re.++ (re.* (str.to_re (seq.++ "\x5c" (seq.++ "/" "")))) (re.* (str.to_re (seq.++ "\x5c" (seq.++ "," "")))))))(re.++ (re.range "," ",") (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))))))(re.++ (re.* (re.++ (str.to_re (seq.++ "O" (seq.++ "U" (seq.++ "=" ""))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\x85" "\x85")(re.union (re.range "\xa0" "\xa0")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))))))))))(re.++ (re.* (str.to_re (seq.++ "\x5c" (seq.++ "/" "")))) (re.* (str.to_re (seq.++ "\x5c" (seq.++ "," "")))))))(re.++ (re.range "," ",") (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))))))(re.++ (re.+ (re.++ (str.to_re (seq.++ "D" (seq.++ "C" (seq.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\x85" "\x85")(re.union (re.range "\xa0" "\xa0")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))))))))))(re.++ (re.* (re.range "," ",")) (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))))))) (re.++ (str.to_re (seq.++ "D" (seq.++ "C" (seq.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\x85" "\x85")(re.union (re.range "\xa0" "\xa0")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))))))))) (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))))))) (str.to_re "")))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
