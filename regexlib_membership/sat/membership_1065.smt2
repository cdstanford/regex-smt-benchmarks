;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((CN=(['\w\d\s\-\&amp;\.]+(\\/)*(\\,)*)+,\s*)*(OU=(['\w\d\s\-\&amp;\.]+(\\/)*(\\,)*)+,\s*)*(DC=['\w\d\s\-\&amp;]+[,]*\s*){1,}(DC=['\w\d\s\-\&amp;]+\s*){1})$
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "OU=_\u00CB\/,DC=q\u0085\u00A0DC=\u00A03DC=\u00CD,DC=\xC\u0085,DC=h\u00A0"
(define-fun Witness1 () String (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "_" (str.++ "\u{cb}" (str.++ "\u{5c}" (str.++ "/" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "q" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{a0}" (str.++ "3" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{cd}" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "h" (str.++ "\u{a0}" ""))))))))))))))))))))))))))))))))))))
;witness2: "CN=\u00DC5y\/\/\/\/,\u0085\u00A0 OU=\u00BA\u00D6.\/;\,R\u0085\/\/,DC=K\xD\u00E0\u00DB \u00A0\xBDC=4"
(define-fun Witness2 () String (str.++ "C" (str.++ "N" (str.++ "=" (str.++ "\u{dc}" (str.++ "5" (str.++ "y" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "," (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ " " (str.++ "O" (str.++ "U" (str.++ "=" (str.++ "\u{ba}" (str.++ "\u{d6}" (str.++ "." (str.++ "\u{5c}" (str.++ "/" (str.++ ";" (str.++ "\u{5c}" (str.++ "," (str.++ "R" (str.++ "\u{85}" (str.++ "\u{5c}" (str.++ "/" (str.++ "\u{5c}" (str.++ "/" (str.++ "," (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "K" (str.++ "\u{0d}" (str.++ "\u{e0}" (str.++ "\u{db}" (str.++ " " (str.++ "\u{a0}" (str.++ "\u{0b}" (str.++ "D" (str.++ "C" (str.++ "=" (str.++ "4" "")))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.++ (re.* (re.++ (str.to_re (str.++ "C" (str.++ "N" (str.++ "=" ""))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (str.to_re (str.++ "\u{5c}" (str.++ "/" "")))) (re.* (str.to_re (str.++ "\u{5c}" (str.++ "," "")))))))(re.++ (re.range "," ",") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.* (re.++ (str.to_re (str.++ "O" (str.++ "U" (str.++ "=" ""))))(re.++ (re.+ (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" ".")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (str.to_re (str.++ "\u{5c}" (str.++ "/" "")))) (re.* (str.to_re (str.++ "\u{5c}" (str.++ "," "")))))))(re.++ (re.range "," ",") (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))(re.++ (re.+ (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))))(re.++ (re.* (re.range "," ",")) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))) (re.++ (str.to_re (str.++ "D" (str.++ "C" (str.++ "=" ""))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "&" "'")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range ";" ";")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))))) (str.to_re "")))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
