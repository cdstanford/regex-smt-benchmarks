;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (&#210;|&#211;|&#212;|&#213;|&#214;|&#216;|&#240;|&#242;|&#243;|&#244;|&#245;|&#246;|&#248;|&amp;#048;|&amp;#079;|&amp;#111;|&amp;#210;|&amp;#211;|&amp;#212;|&amp;#213;|&amp;#214;|&amp;#216;|&amp;Ograve;|&amp;Oacute;|&amp;Ocirc;|&amp;Otilde;|&amp;Ouml;|&amp;Oslash;|&amp;#242;|&amp;#243;|&amp;#244;|&amp;#245;|&amp;ograve;|&amp;oacute;|&amp;ocirc;|&amp;otilde;|&amp;ouml;|&amp;oslash;)
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "&amp;#245;"
(define-fun Witness1 () String (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "5" (seq.++ ";" "")))))))))))
;witness2: "&amp;#048;"
(define-fun Witness2 () String (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "4" (seq.++ "8" (seq.++ ";" "")))))))))))

(assert (= regexA (re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "0" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "1" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "2" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "3" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "4" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "6" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "0" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "2" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "3" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "4" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "5" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "6" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "8" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "4" (seq.++ "8" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "7" (seq.++ "9" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "1" (seq.++ "1" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "0" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "1" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "2" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "3" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "4" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "1" (seq.++ "6" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "O" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "O" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "O" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "O" (seq.++ "t" (seq.++ "i" (seq.++ "l" (seq.++ "d" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "O" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "O" (seq.++ "s" (seq.++ "l" (seq.++ "a" (seq.++ "s" (seq.++ "h" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "2" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "3" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "4" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "4" (seq.++ "5" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "o" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "o" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "o" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "o" (seq.++ "t" (seq.++ "i" (seq.++ "l" (seq.++ "d" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "o" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" ""))))))))))) (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "o" (seq.++ "s" (seq.++ "l" (seq.++ "a" (seq.++ "s" (seq.++ "h" (seq.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
