;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (&#210;|&#211;|&#212;|&#213;|&#214;|&#216;|&#240;|&#242;|&#243;|&#244;|&#245;|&#246;|&#248;|&amp;#048;|&amp;#079;|&amp;#111;|&amp;#210;|&amp;#211;|&amp;#212;|&amp;#213;|&amp;#214;|&amp;#216;|&amp;Ograve;|&amp;Oacute;|&amp;Ocirc;|&amp;Otilde;|&amp;Ouml;|&amp;Oslash;|&amp;#242;|&amp;#243;|&amp;#244;|&amp;#245;|&amp;ograve;|&amp;oacute;|&amp;ocirc;|&amp;otilde;|&amp;ouml;|&amp;oslash;)
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "&amp;#245;"
(define-fun Witness1 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ ";" "")))))))))))
;witness2: "&amp;#048;"
(define-fun Witness2 () String (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ ";" "")))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "0" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "1" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "0" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "8" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "4" (str.++ "8" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "7" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "1" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "0" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "1" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "1" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "O" (str.++ "s" (str.++ "l" (str.++ "a" (str.++ "s" (str.++ "h" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "4" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" ""))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "o" (str.++ "s" (str.++ "l" (str.++ "a" (str.++ "s" (str.++ "h" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
