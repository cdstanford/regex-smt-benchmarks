;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (?#WebOrIP)((?#protocol)((http|https):\/\/)?(?#subDomain)(([a-zA-Z0-9]+\.(?#domain)[a-zA-Z0-9\-]+(?#TLD)(\.[a-zA-Z]+){1,2})|(?#IPAddress)((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])))+(?#Port)(:[1-9][0-9]*)?)+(?#Path)((\/((?#dirOrFileName)[a-zA-Z0-9_\-\%\~\+]+)?)*)?(?#extension)(\.([a-zA-Z0-9_]+))?(?#parameters)(\?([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?(?#additionalParameters)(\&([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?)*)?
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "\u0080\u009Ehttps://252.81.34.1701P1.x9.rtZ:888https://253.255.8.2534.70.1.898.197.90.2519.254.3.8http://255.7.249.254Z.--.U.a:943.255.254.09978.245.195.88/P~a%/?-5_--=%"
(define-fun Witness1 () String (seq.++ "\x80" (seq.++ "\x9e" (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ "s" (seq.++ ":" (seq.++ "/" (seq.++ "/" (seq.++ "2" (seq.++ "5" (seq.++ "2" (seq.++ "." (seq.++ "8" (seq.++ "1" (seq.++ "." (seq.++ "3" (seq.++ "4" (seq.++ "." (seq.++ "1" (seq.++ "7" (seq.++ "0" (seq.++ "1" (seq.++ "P" (seq.++ "1" (seq.++ "." (seq.++ "x" (seq.++ "9" (seq.++ "." (seq.++ "r" (seq.++ "t" (seq.++ "Z" (seq.++ ":" (seq.++ "8" (seq.++ "8" (seq.++ "8" (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ "s" (seq.++ ":" (seq.++ "/" (seq.++ "/" (seq.++ "2" (seq.++ "5" (seq.++ "3" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "5" (seq.++ "." (seq.++ "8" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "3" (seq.++ "4" (seq.++ "." (seq.++ "7" (seq.++ "0" (seq.++ "." (seq.++ "1" (seq.++ "." (seq.++ "8" (seq.++ "9" (seq.++ "8" (seq.++ "." (seq.++ "1" (seq.++ "9" (seq.++ "7" (seq.++ "." (seq.++ "9" (seq.++ "0" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "1" (seq.++ "9" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "4" (seq.++ "." (seq.++ "3" (seq.++ "." (seq.++ "8" (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ ":" (seq.++ "/" (seq.++ "/" (seq.++ "2" (seq.++ "5" (seq.++ "5" (seq.++ "." (seq.++ "7" (seq.++ "." (seq.++ "2" (seq.++ "4" (seq.++ "9" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "4" (seq.++ "Z" (seq.++ "." (seq.++ "-" (seq.++ "-" (seq.++ "." (seq.++ "U" (seq.++ "." (seq.++ "a" (seq.++ ":" (seq.++ "9" (seq.++ "4" (seq.++ "3" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "5" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "4" (seq.++ "." (seq.++ "0" (seq.++ "9" (seq.++ "9" (seq.++ "7" (seq.++ "8" (seq.++ "." (seq.++ "2" (seq.++ "4" (seq.++ "5" (seq.++ "." (seq.++ "1" (seq.++ "9" (seq.++ "5" (seq.++ "." (seq.++ "8" (seq.++ "8" (seq.++ "/" (seq.++ "P" (seq.++ "~" (seq.++ "a" (seq.++ "%" (seq.++ "/" (seq.++ "?" (seq.++ "-" (seq.++ "5" (seq.++ "_" (seq.++ "-" (seq.++ "-" (seq.++ "=" (seq.++ "%" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "http://089.238.058.25528.253.237.64254.25.254.248251.19.248.239244.246.82.18:1https://7.7.jx.JYIzrl099.220.254.399.248.144.99217.253.6.2196M6x3.-.KmZ.iI/-//.8?U=-1u"
(define-fun Witness2 () String (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ ":" (seq.++ "/" (seq.++ "/" (seq.++ "0" (seq.++ "8" (seq.++ "9" (seq.++ "." (seq.++ "2" (seq.++ "3" (seq.++ "8" (seq.++ "." (seq.++ "0" (seq.++ "5" (seq.++ "8" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "5" (seq.++ "2" (seq.++ "8" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "3" (seq.++ "." (seq.++ "2" (seq.++ "3" (seq.++ "7" (seq.++ "." (seq.++ "6" (seq.++ "4" (seq.++ "2" (seq.++ "5" (seq.++ "4" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "4" (seq.++ "." (seq.++ "2" (seq.++ "4" (seq.++ "8" (seq.++ "2" (seq.++ "5" (seq.++ "1" (seq.++ "." (seq.++ "1" (seq.++ "9" (seq.++ "." (seq.++ "2" (seq.++ "4" (seq.++ "8" (seq.++ "." (seq.++ "2" (seq.++ "3" (seq.++ "9" (seq.++ "2" (seq.++ "4" (seq.++ "4" (seq.++ "." (seq.++ "2" (seq.++ "4" (seq.++ "6" (seq.++ "." (seq.++ "8" (seq.++ "2" (seq.++ "." (seq.++ "1" (seq.++ "8" (seq.++ ":" (seq.++ "1" (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ "s" (seq.++ ":" (seq.++ "/" (seq.++ "/" (seq.++ "7" (seq.++ "." (seq.++ "7" (seq.++ "." (seq.++ "j" (seq.++ "x" (seq.++ "." (seq.++ "J" (seq.++ "Y" (seq.++ "I" (seq.++ "z" (seq.++ "r" (seq.++ "l" (seq.++ "0" (seq.++ "9" (seq.++ "9" (seq.++ "." (seq.++ "2" (seq.++ "2" (seq.++ "0" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "4" (seq.++ "." (seq.++ "3" (seq.++ "9" (seq.++ "9" (seq.++ "." (seq.++ "2" (seq.++ "4" (seq.++ "8" (seq.++ "." (seq.++ "1" (seq.++ "4" (seq.++ "4" (seq.++ "." (seq.++ "9" (seq.++ "9" (seq.++ "2" (seq.++ "1" (seq.++ "7" (seq.++ "." (seq.++ "2" (seq.++ "5" (seq.++ "3" (seq.++ "." (seq.++ "6" (seq.++ "." (seq.++ "2" (seq.++ "1" (seq.++ "9" (seq.++ "6" (seq.++ "M" (seq.++ "6" (seq.++ "x" (seq.++ "3" (seq.++ "." (seq.++ "-" (seq.++ "." (seq.++ "K" (seq.++ "m" (seq.++ "Z" (seq.++ "." (seq.++ "i" (seq.++ "I" (seq.++ "/" (seq.++ "-" (seq.++ "/" (seq.++ "/" (seq.++ "." (seq.++ "8" (seq.++ "?" (seq.++ "U" (seq.++ "=" (seq.++ "-" (seq.++ "1" (seq.++ "u" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.+ (re.++ (re.opt (re.++ (re.union (str.to_re (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" ""))))) (str.to_re (seq.++ "h" (seq.++ "t" (seq.++ "t" (seq.++ "p" (seq.++ "s" ""))))))) (str.to_re (seq.++ ":" (seq.++ "/" (seq.++ "/" ""))))))(re.++ (re.+ (re.union (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))(re.++ (re.range "." ".")(re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z") (re.range "a" "z"))))) ((_ re.loop 1 2) (re.++ (re.range "." ".") (re.+ (re.union (re.range "A" "Z") (re.range "a" "z")))))))) (re.++ (re.union (re.++ (str.to_re (seq.++ "2" (seq.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "1" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (seq.++ "2" (seq.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".")(re.++ (re.union (re.++ (str.to_re (seq.++ "2" (seq.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9")))))(re.++ (re.range "." ".") (re.union (re.++ (str.to_re (seq.++ "2" (seq.++ "5" ""))) (re.range "0" "5"))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "0" "4") (re.range "0" "9")))(re.union (re.++ (re.range "0" "1") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "1" "9") (re.range "0" "9")) (re.range "0" "9"))))))))))))) (re.opt (re.++ (re.range ":" ":")(re.++ (re.range "1" "9") (re.* (re.range "0" "9"))))))))(re.++ (re.opt (re.* (re.++ (re.range "/" "/") (re.opt (re.+ (re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))))(re.++ (re.opt (re.++ (re.range "." ".") (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))) (re.opt (re.++ (re.range "?" "?")(re.++ (re.opt (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "=" "=") (re.+ (re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~")))))))))))) (re.* (re.++ (re.range "&" "&") (re.opt (re.++ (re.+ (re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_") (re.range "a" "z"))))))(re.++ (re.range "=" "=") (re.+ (re.union (re.range "%" "%")(re.union (re.range "+" "+")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z") (re.range "~" "~"))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
