;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^(?:(?:(?:(?:[1-2][0-9]{3}) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]))|(?:(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3}))))|(?:(?:(?:(?:[1-2][0-9]{3}) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]))|(?:(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))) *(?:(?:(?:1[0-2]|0?[1-9])(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))?(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))? *(?:(?i:[ap]m)))|(?:(?:2[0-3]|[01]?[0-9])(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))?))))$
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "31/ 12  9"
(define-fun Witness1 () String (seq.++ "3" (seq.++ "1" (seq.++ "/" (seq.++ " " (seq.++ "1" (seq.++ "2" (seq.++ " " (seq.++ " " (seq.++ "9" ""))))))))))
;witness2: "30tH        fEBRUary /29"
(define-fun Witness2 () String (seq.++ "3" (seq.++ "0" (seq.++ "t" (seq.++ "H" (seq.++ " " (seq.++ " " (seq.++ " " (seq.++ " " (seq.++ " " (seq.++ " " (seq.++ " " (seq.++ " " (seq.++ "f" (seq.++ "E" (seq.++ "B" (seq.++ "R" (seq.++ "U" (seq.++ "a" (seq.++ "r" (seq.++ "y" (seq.++ " " (seq.++ "/" (seq.++ "2" (seq.++ "9" "")))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "1" "2")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (seq.++ "a" (seq.++ "n" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (seq.++ "p" (seq.++ "r" ""))) (re.opt (str.to_re (seq.++ "i" (seq.++ "l" ""))))) (re.++ (str.to_re (seq.++ "u" (seq.++ "g" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "s" (seq.++ "t" ""))))))))(re.union (re.++ (str.to_re (seq.++ "m" (seq.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (seq.++ "c" (seq.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "v" "")))) (str.to_re (seq.++ "d" (seq.++ "e" (seq.++ "c" ""))))) (re.opt (str.to_re (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))(re.union (re.++ (str.to_re (seq.++ "f" (seq.++ "e" (seq.++ "b" "")))) (re.opt (str.to_re (seq.++ "r" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))))(re.union (re.++ (str.to_re (seq.++ "s" (seq.++ "e" (seq.++ "p" "")))) (re.opt (str.to_re (seq.++ "t" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))) (re.++ (str.to_re (seq.++ "o" (seq.++ "c" (seq.++ "t" "")))) (re.opt (str.to_re (seq.++ "o" (seq.++ "b" (seq.++ "e" (seq.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (seq.++ "1" (seq.++ "s" (seq.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "2" (seq.++ "n" (seq.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "3" (seq.++ "r" (seq.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (seq.++ "t" (seq.++ "h" "")))))(re.union (str.to_re (seq.++ "2" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))) (str.to_re (seq.++ "3" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (seq.++ "1" (seq.++ "s" (seq.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "2" (seq.++ "n" (seq.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "3" (seq.++ "r" (seq.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (seq.++ "t" (seq.++ "h" "")))))(re.union (str.to_re (seq.++ "2" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))) (str.to_re (seq.++ "3" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (seq.++ "a" (seq.++ "n" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (seq.++ "p" (seq.++ "r" ""))) (re.opt (str.to_re (seq.++ "i" (seq.++ "l" ""))))) (re.++ (str.to_re (seq.++ "u" (seq.++ "g" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "s" (seq.++ "t" ""))))))))(re.union (re.++ (str.to_re (seq.++ "m" (seq.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (seq.++ "c" (seq.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "v" "")))) (str.to_re (seq.++ "d" (seq.++ "e" (seq.++ "c" ""))))) (re.opt (str.to_re (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))(re.union (re.++ (str.to_re (seq.++ "f" (seq.++ "e" (seq.++ "b" "")))) (re.opt (str.to_re (seq.++ "r" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))))(re.union (re.++ (str.to_re (seq.++ "s" (seq.++ "e" (seq.++ "p" "")))) (re.opt (str.to_re (seq.++ "t" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))) (re.++ (str.to_re (seq.++ "o" (seq.++ "c" (seq.++ "t" "")))) (re.opt (str.to_re (seq.++ "o" (seq.++ "b" (seq.++ "e" (seq.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9")))))))))))) (re.++ (re.union (re.++ (re.range "1" "2")(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))(re.union (re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (seq.++ "a" (seq.++ "n" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (seq.++ "p" (seq.++ "r" ""))) (re.opt (str.to_re (seq.++ "i" (seq.++ "l" ""))))) (re.++ (str.to_re (seq.++ "u" (seq.++ "g" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "s" (seq.++ "t" ""))))))))(re.union (re.++ (str.to_re (seq.++ "m" (seq.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (seq.++ "c" (seq.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "v" "")))) (str.to_re (seq.++ "d" (seq.++ "e" (seq.++ "c" ""))))) (re.opt (str.to_re (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))(re.union (re.++ (str.to_re (seq.++ "f" (seq.++ "e" (seq.++ "b" "")))) (re.opt (str.to_re (seq.++ "r" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))))(re.union (re.++ (str.to_re (seq.++ "s" (seq.++ "e" (seq.++ "p" "")))) (re.opt (str.to_re (seq.++ "t" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))) (re.++ (str.to_re (seq.++ "o" (seq.++ "c" (seq.++ "t" "")))) (re.opt (str.to_re (seq.++ "o" (seq.++ "b" (seq.++ "e" (seq.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (seq.++ "1" (seq.++ "s" (seq.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "2" (seq.++ "n" (seq.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "3" (seq.++ "r" (seq.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (seq.++ "t" (seq.++ "h" "")))))(re.union (str.to_re (seq.++ "2" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))) (str.to_re (seq.++ "3" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9")))))))))))) (re.++ (re.union (re.++ (re.range "1" "2") (re.range "0" "9"))(re.union (re.++ (re.range "3" "3") (re.range "0" "1"))(re.union (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9"))(re.union (re.++ (re.opt (re.range "2" "3")) (str.to_re (seq.++ "1" (seq.++ "s" (seq.++ "t" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "2" (seq.++ "n" (seq.++ "d" "")))))(re.union (re.++ (re.opt (re.range "2" "2")) (str.to_re (seq.++ "3" (seq.++ "r" (seq.++ "d" "")))))(re.union (re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))(re.union (re.++ (re.range "1" "1")(re.++ (re.range "0" "9") (str.to_re (seq.++ "t" (seq.++ "h" "")))))(re.union (str.to_re (seq.++ "2" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))(re.union (re.++ (re.range "2" "2")(re.++ (re.range "4" "9") (str.to_re (seq.++ "t" (seq.++ "h" ""))))) (str.to_re (seq.++ "3" (seq.++ "0" (seq.++ "t" (seq.++ "h" "")))))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "j" "j") (re.union (re.++ (str.to_re (seq.++ "a" (seq.++ "n" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))) (re.++ (re.range "u" "u") (re.union (re.++ (re.range "n" "n") (re.opt (re.range "e" "e"))) (re.++ (re.range "l" "l") (re.opt (re.range "y" "y")))))))(re.union (re.++ (re.range "a" "a") (re.union (re.++ (str.to_re (seq.++ "p" (seq.++ "r" ""))) (re.opt (str.to_re (seq.++ "i" (seq.++ "l" ""))))) (re.++ (str.to_re (seq.++ "u" (seq.++ "g" ""))) (re.opt (str.to_re (seq.++ "u" (seq.++ "s" (seq.++ "t" ""))))))))(re.union (re.++ (str.to_re (seq.++ "m" (seq.++ "a" ""))) (re.union (re.range "y" "y") (re.++ (re.range "r" "r") (re.opt (str.to_re (seq.++ "c" (seq.++ "h" "")))))))(re.union (re.++ (re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "v" "")))) (str.to_re (seq.++ "d" (seq.++ "e" (seq.++ "c" ""))))) (re.opt (str.to_re (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))(re.union (re.++ (str.to_re (seq.++ "f" (seq.++ "e" (seq.++ "b" "")))) (re.opt (str.to_re (seq.++ "r" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))))(re.union (re.++ (str.to_re (seq.++ "s" (seq.++ "e" (seq.++ "p" "")))) (re.opt (str.to_re (seq.++ "t" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))) (re.++ (str.to_re (seq.++ "o" (seq.++ "c" (seq.++ "t" "")))) (re.opt (str.to_re (seq.++ "o" (seq.++ "b" (seq.++ "e" (seq.++ "r" "")))))))))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range " " " ") (re.range "," "/"))(re.++ (re.* (re.range " " " ")) (re.union ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.range "1" "2") ((_ re.loop 3 3) (re.range "0" "9"))))))))))))))))(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.union (re.++ (re.range "1" "1") (re.range "0" "2")) (re.++ (re.opt (re.range "0" "0")) (re.range "1" "9")))(re.++ (re.opt (re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")))))))(re.++ (re.opt (re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")))))))(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.range "a" "a") (re.range "p" "p")) (re.range "m" "m")))))) (re.++ (re.union (re.++ (re.range "2" "2") (re.range "0" "3")) (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")))(re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " "))(re.++ (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9"))) (re.opt (re.++ (re.* (re.range " " " "))(re.++ (re.range ":" ":")(re.++ (re.* (re.range " " " ")) (re.union (re.++ (re.range "1" "5") (re.range "0" "9")) (re.++ (re.opt (re.range "0" "0")) (re.range "0" "9")))))))))))))))))))) (str.to_re "")))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
