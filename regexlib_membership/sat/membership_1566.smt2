;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^(?<From>(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER|[ ]|,|/|[0-9])+)(-|â€“|:|TO)?(?<To>(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER|[ ]|,|/|[0-9]|PRESENT)+)+(:)*
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "NOVEMBERJUNEMAYDECEMBERTOAUGUST:"
(define-fun Witness1 () String (seq.++ "N" (seq.++ "O" (seq.++ "V" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "J" (seq.++ "U" (seq.++ "N" (seq.++ "E" (seq.++ "M" (seq.++ "A" (seq.++ "Y" (seq.++ "D" (seq.++ "E" (seq.++ "C" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "T" (seq.++ "O" (seq.++ "A" (seq.++ "U" (seq.++ "G" (seq.++ "U" (seq.++ "S" (seq.++ "T" (seq.++ ":" "")))))))))))))))))))))))))))))))))
;witness2: "//OCTOBERMAYMARCHJULYFEBRUARYAUGUST OCTOBERAUGUSTFEBRUARYFEBRUARY-DECEMBER4SEPTEMBERJUNEJUNEFEBRUARYSEPTEMBER0MARCH MAYJUNEDECEMBERSEPTEMBERSEPTEMBERAUGUSTAPRILMARCHJULYAPRILMARCH::;\u008E"
(define-fun Witness2 () String (seq.++ "/" (seq.++ "/" (seq.++ "O" (seq.++ "C" (seq.++ "T" (seq.++ "O" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "M" (seq.++ "A" (seq.++ "Y" (seq.++ "M" (seq.++ "A" (seq.++ "R" (seq.++ "C" (seq.++ "H" (seq.++ "J" (seq.++ "U" (seq.++ "L" (seq.++ "Y" (seq.++ "F" (seq.++ "E" (seq.++ "B" (seq.++ "R" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" (seq.++ "A" (seq.++ "U" (seq.++ "G" (seq.++ "U" (seq.++ "S" (seq.++ "T" (seq.++ " " (seq.++ "O" (seq.++ "C" (seq.++ "T" (seq.++ "O" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "A" (seq.++ "U" (seq.++ "G" (seq.++ "U" (seq.++ "S" (seq.++ "T" (seq.++ "F" (seq.++ "E" (seq.++ "B" (seq.++ "R" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" (seq.++ "F" (seq.++ "E" (seq.++ "B" (seq.++ "R" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" (seq.++ "-" (seq.++ "D" (seq.++ "E" (seq.++ "C" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "4" (seq.++ "S" (seq.++ "E" (seq.++ "P" (seq.++ "T" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "J" (seq.++ "U" (seq.++ "N" (seq.++ "E" (seq.++ "J" (seq.++ "U" (seq.++ "N" (seq.++ "E" (seq.++ "F" (seq.++ "E" (seq.++ "B" (seq.++ "R" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" (seq.++ "S" (seq.++ "E" (seq.++ "P" (seq.++ "T" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "0" (seq.++ "M" (seq.++ "A" (seq.++ "R" (seq.++ "C" (seq.++ "H" (seq.++ " " (seq.++ "M" (seq.++ "A" (seq.++ "Y" (seq.++ "J" (seq.++ "U" (seq.++ "N" (seq.++ "E" (seq.++ "D" (seq.++ "E" (seq.++ "C" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "S" (seq.++ "E" (seq.++ "P" (seq.++ "T" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "S" (seq.++ "E" (seq.++ "P" (seq.++ "T" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" (seq.++ "A" (seq.++ "U" (seq.++ "G" (seq.++ "U" (seq.++ "S" (seq.++ "T" (seq.++ "A" (seq.++ "P" (seq.++ "R" (seq.++ "I" (seq.++ "L" (seq.++ "M" (seq.++ "A" (seq.++ "R" (seq.++ "C" (seq.++ "H" (seq.++ "J" (seq.++ "U" (seq.++ "L" (seq.++ "Y" (seq.++ "A" (seq.++ "P" (seq.++ "R" (seq.++ "I" (seq.++ "L" (seq.++ "M" (seq.++ "A" (seq.++ "R" (seq.++ "C" (seq.++ "H" (seq.++ ":" (seq.++ ":" (seq.++ ";" (seq.++ "\x8e" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.+ (re.union (str.to_re (seq.++ "J" (seq.++ "A" (seq.++ "N" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" ""))))))))(re.union (str.to_re (seq.++ "F" (seq.++ "E" (seq.++ "B" (seq.++ "R" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" "")))))))))(re.union (str.to_re (seq.++ "M" (seq.++ "A" (seq.++ "R" (seq.++ "C" (seq.++ "H" ""))))))(re.union (str.to_re (seq.++ "A" (seq.++ "P" (seq.++ "R" (seq.++ "I" (seq.++ "L" ""))))))(re.union (str.to_re (seq.++ "M" (seq.++ "A" (seq.++ "Y" ""))))(re.union (str.to_re (seq.++ "J" (seq.++ "U" (seq.++ "N" (seq.++ "E" "")))))(re.union (str.to_re (seq.++ "J" (seq.++ "U" (seq.++ "L" (seq.++ "Y" "")))))(re.union (str.to_re (seq.++ "A" (seq.++ "U" (seq.++ "G" (seq.++ "U" (seq.++ "S" (seq.++ "T" "")))))))(re.union (str.to_re (seq.++ "S" (seq.++ "E" (seq.++ "P" (seq.++ "T" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" ""))))))))))(re.union (str.to_re (seq.++ "O" (seq.++ "C" (seq.++ "T" (seq.++ "O" (seq.++ "B" (seq.++ "E" (seq.++ "R" ""))))))))(re.union (str.to_re (seq.++ "N" (seq.++ "O" (seq.++ "V" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" "")))))))))(re.union (str.to_re (seq.++ "D" (seq.++ "E" (seq.++ "C" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" ""))))))))) (re.union (re.range " " " ")(re.union (re.range "," ",") (re.range "/" "9"))))))))))))))))(re.++ (re.opt (re.union (re.union (re.range "-" "-")(re.union (re.range ":" ":") (re.range "\xff" "\xff"))) (str.to_re (seq.++ "T" (seq.++ "O" "")))))(re.++ (re.+ (re.+ (re.union (str.to_re (seq.++ "J" (seq.++ "A" (seq.++ "N" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" ""))))))))(re.union (str.to_re (seq.++ "F" (seq.++ "E" (seq.++ "B" (seq.++ "R" (seq.++ "U" (seq.++ "A" (seq.++ "R" (seq.++ "Y" "")))))))))(re.union (str.to_re (seq.++ "M" (seq.++ "A" (seq.++ "R" (seq.++ "C" (seq.++ "H" ""))))))(re.union (str.to_re (seq.++ "A" (seq.++ "P" (seq.++ "R" (seq.++ "I" (seq.++ "L" ""))))))(re.union (str.to_re (seq.++ "M" (seq.++ "A" (seq.++ "Y" ""))))(re.union (str.to_re (seq.++ "J" (seq.++ "U" (seq.++ "N" (seq.++ "E" "")))))(re.union (str.to_re (seq.++ "J" (seq.++ "U" (seq.++ "L" (seq.++ "Y" "")))))(re.union (str.to_re (seq.++ "A" (seq.++ "U" (seq.++ "G" (seq.++ "U" (seq.++ "S" (seq.++ "T" "")))))))(re.union (str.to_re (seq.++ "S" (seq.++ "E" (seq.++ "P" (seq.++ "T" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" ""))))))))))(re.union (str.to_re (seq.++ "O" (seq.++ "C" (seq.++ "T" (seq.++ "O" (seq.++ "B" (seq.++ "E" (seq.++ "R" ""))))))))(re.union (str.to_re (seq.++ "N" (seq.++ "O" (seq.++ "V" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" "")))))))))(re.union (str.to_re (seq.++ "D" (seq.++ "E" (seq.++ "C" (seq.++ "E" (seq.++ "M" (seq.++ "B" (seq.++ "E" (seq.++ "R" "")))))))))(re.union (re.union (re.range " " " ")(re.union (re.range "," ",") (re.range "/" "9"))) (str.to_re (seq.++ "P" (seq.++ "R" (seq.++ "E" (seq.++ "S" (seq.++ "E" (seq.++ "N" (seq.++ "T" ""))))))))))))))))))))))) (re.* (re.range ":" ":"))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
