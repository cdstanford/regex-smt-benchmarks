;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (https?://)?((?:(\w+-)*\w+)\.)+(?:com|org|net|edu|gov|biz|info|name|museum|[a-z]{2})(\/?\w?-?=?_?\??&?)+[\.]?[a-z0-9\?=&_\-%#]*
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "\u00E79\u00E3-\u00BA_\u00F1.biz-&&&/_#"
(define-fun Witness1 () String (str.++ "\u{e7}" (str.++ "9" (str.++ "\u{e3}" (str.++ "-" (str.++ "\u{ba}" (str.++ "_" (str.++ "\u{f1}" (str.++ "." (str.++ "b" (str.++ "i" (str.++ "z" (str.++ "-" (str.++ "&" (str.++ "&" (str.++ "&" (str.++ "/" (str.++ "_" (str.++ "#" "")))))))))))))))))))
;witness2: "https://\u00BA-7-\u00AAz-\u00BAy\u00C8-0-f-\u00BA-\u00AA0\u00D89\u00AA7\u00B5-\u00C7-\u00E8\u00CB-\u00FB\u00DB-9l.6.9.2-\u00E9\u00FE9.9\u00FA\u00FBE\u00BAl\u00F8-q9-\u00BA-\u00EF\u00F6ut\u00B5.lv-5\u00AA\u00C8.y-3.\u00F0.museum/6_\u00F9M"
(define-fun Witness2 () String (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" (str.++ "s" (str.++ ":" (str.++ "/" (str.++ "/" (str.++ "\u{ba}" (str.++ "-" (str.++ "7" (str.++ "-" (str.++ "\u{aa}" (str.++ "z" (str.++ "-" (str.++ "\u{ba}" (str.++ "y" (str.++ "\u{c8}" (str.++ "-" (str.++ "0" (str.++ "-" (str.++ "f" (str.++ "-" (str.++ "\u{ba}" (str.++ "-" (str.++ "\u{aa}" (str.++ "0" (str.++ "\u{d8}" (str.++ "9" (str.++ "\u{aa}" (str.++ "7" (str.++ "\u{b5}" (str.++ "-" (str.++ "\u{c7}" (str.++ "-" (str.++ "\u{e8}" (str.++ "\u{cb}" (str.++ "-" (str.++ "\u{fb}" (str.++ "\u{db}" (str.++ "-" (str.++ "9" (str.++ "l" (str.++ "." (str.++ "6" (str.++ "." (str.++ "9" (str.++ "." (str.++ "2" (str.++ "-" (str.++ "\u{e9}" (str.++ "\u{fe}" (str.++ "9" (str.++ "." (str.++ "9" (str.++ "\u{fa}" (str.++ "\u{fb}" (str.++ "E" (str.++ "\u{ba}" (str.++ "l" (str.++ "\u{f8}" (str.++ "-" (str.++ "q" (str.++ "9" (str.++ "-" (str.++ "\u{ba}" (str.++ "-" (str.++ "\u{ef}" (str.++ "\u{f6}" (str.++ "u" (str.++ "t" (str.++ "\u{b5}" (str.++ "." (str.++ "l" (str.++ "v" (str.++ "-" (str.++ "5" (str.++ "\u{aa}" (str.++ "\u{c8}" (str.++ "." (str.++ "y" (str.++ "-" (str.++ "3" (str.++ "." (str.++ "\u{f0}" (str.++ "." (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" (str.++ "/" (str.++ "6" (str.++ "_" (str.++ "\u{f9}" (str.++ "M" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (str.to_re (str.++ "h" (str.++ "t" (str.++ "t" (str.++ "p" "")))))(re.++ (re.opt (re.range "s" "s")) (str.to_re (str.++ ":" (str.++ "/" (str.++ "/" "")))))))(re.++ (re.+ (re.++ (re.* (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "-" "-")))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.range "." "."))))(re.++ (re.union (str.to_re (str.++ "c" (str.++ "o" (str.++ "m" ""))))(re.union (str.to_re (str.++ "o" (str.++ "r" (str.++ "g" ""))))(re.union (str.to_re (str.++ "n" (str.++ "e" (str.++ "t" ""))))(re.union (str.to_re (str.++ "e" (str.++ "d" (str.++ "u" ""))))(re.union (str.to_re (str.++ "g" (str.++ "o" (str.++ "v" ""))))(re.union (str.to_re (str.++ "b" (str.++ "i" (str.++ "z" ""))))(re.union (str.to_re (str.++ "i" (str.++ "n" (str.++ "f" (str.++ "o" "")))))(re.union (str.to_re (str.++ "n" (str.++ "a" (str.++ "m" (str.++ "e" "")))))(re.union (str.to_re (str.++ "m" (str.++ "u" (str.++ "s" (str.++ "e" (str.++ "u" (str.++ "m" ""))))))) ((_ re.loop 2 2) (re.range "a" "z")))))))))))(re.++ (re.+ (re.++ (re.opt (re.range "/" "/"))(re.++ (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.opt (re.range "-" "-"))(re.++ (re.opt (re.range "=" "="))(re.++ (re.opt (re.range "_" "_"))(re.++ (re.opt (re.range "?" "?")) (re.opt (re.range "&" "&")))))))))(re.++ (re.opt (re.range "." ".")) (re.* (re.union (re.range "#" "#")(re.union (re.range "%" "&")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "=" "=")(re.union (re.range "?" "?")(re.union (re.range "_" "_") (re.range "a" "z"))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
