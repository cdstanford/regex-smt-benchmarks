;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\,*\s\s*\d{4}$|^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\,*\s\d{4}$|^(January|February|March|April|May|June|July|August|September|October|November|December)\,*\s\d{4}$|^(january|february|march|april|may|june|july|august|september|october|november|december)\,*\s\d{4}$
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "mar,,,,\xC8820"
(define-fun Witness1 () String (seq.++ "m" (seq.++ "a" (seq.++ "r" (seq.++ "," (seq.++ "," (seq.++ "," (seq.++ "," (seq.++ "\x0c" (seq.++ "8" (seq.++ "8" (seq.++ "2" (seq.++ "0" "")))))))))))))
;witness2: "December,,,,\u00852962"
(define-fun Witness2 () String (seq.++ "D" (seq.++ "e" (seq.++ "c" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" (seq.++ "," (seq.++ "," (seq.++ "," (seq.++ "," (seq.++ "\x85" (seq.++ "2" (seq.++ "9" (seq.++ "6" (seq.++ "2" ""))))))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (seq.++ "J" (seq.++ "a" (seq.++ "n" ""))))(re.union (str.to_re (seq.++ "F" (seq.++ "e" (seq.++ "b" ""))))(re.union (str.to_re (seq.++ "M" (seq.++ "a" (seq.++ "r" ""))))(re.union (str.to_re (seq.++ "A" (seq.++ "p" (seq.++ "r" ""))))(re.union (str.to_re (seq.++ "M" (seq.++ "a" (seq.++ "y" ""))))(re.union (str.to_re (seq.++ "J" (seq.++ "u" (seq.++ "n" ""))))(re.union (str.to_re (seq.++ "J" (seq.++ "u" (seq.++ "l" ""))))(re.union (str.to_re (seq.++ "A" (seq.++ "u" (seq.++ "g" ""))))(re.union (str.to_re (seq.++ "S" (seq.++ "e" (seq.++ "p" ""))))(re.union (str.to_re (seq.++ "O" (seq.++ "c" (seq.++ "t" ""))))(re.union (str.to_re (seq.++ "N" (seq.++ "o" (seq.++ "v" "")))) (str.to_re (seq.++ "D" (seq.++ "e" (seq.++ "c" "")))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (seq.++ "j" (seq.++ "a" (seq.++ "n" ""))))(re.union (str.to_re (seq.++ "f" (seq.++ "e" (seq.++ "b" ""))))(re.union (str.to_re (seq.++ "m" (seq.++ "a" (seq.++ "r" ""))))(re.union (str.to_re (seq.++ "a" (seq.++ "p" (seq.++ "r" ""))))(re.union (str.to_re (seq.++ "m" (seq.++ "a" (seq.++ "y" ""))))(re.union (str.to_re (seq.++ "j" (seq.++ "u" (seq.++ "n" ""))))(re.union (str.to_re (seq.++ "j" (seq.++ "u" (seq.++ "l" ""))))(re.union (str.to_re (seq.++ "a" (seq.++ "u" (seq.++ "g" ""))))(re.union (str.to_re (seq.++ "s" (seq.++ "e" (seq.++ "p" ""))))(re.union (str.to_re (seq.++ "o" (seq.++ "c" (seq.++ "t" ""))))(re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "v" "")))) (str.to_re (seq.++ "d" (seq.++ "e" (seq.++ "c" "")))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))(re.union (re.++ (str.to_re "")(re.++ (re.union (str.to_re (seq.++ "J" (seq.++ "a" (seq.++ "n" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))))(re.union (str.to_re (seq.++ "F" (seq.++ "e" (seq.++ "b" (seq.++ "r" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" "")))))))))(re.union (str.to_re (seq.++ "M" (seq.++ "a" (seq.++ "r" (seq.++ "c" (seq.++ "h" ""))))))(re.union (str.to_re (seq.++ "A" (seq.++ "p" (seq.++ "r" (seq.++ "i" (seq.++ "l" ""))))))(re.union (str.to_re (seq.++ "M" (seq.++ "a" (seq.++ "y" ""))))(re.union (str.to_re (seq.++ "J" (seq.++ "u" (seq.++ "n" (seq.++ "e" "")))))(re.union (str.to_re (seq.++ "J" (seq.++ "u" (seq.++ "l" (seq.++ "y" "")))))(re.union (str.to_re (seq.++ "A" (seq.++ "u" (seq.++ "g" (seq.++ "u" (seq.++ "s" (seq.++ "t" "")))))))(re.union (str.to_re (seq.++ "S" (seq.++ "e" (seq.++ "p" (seq.++ "t" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))))(re.union (str.to_re (seq.++ "O" (seq.++ "c" (seq.++ "t" (seq.++ "o" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))(re.union (str.to_re (seq.++ "N" (seq.++ "o" (seq.++ "v" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))) (str.to_re (seq.++ "D" (seq.++ "e" (seq.++ "c" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))) (re.++ (str.to_re "")(re.++ (re.union (str.to_re (seq.++ "j" (seq.++ "a" (seq.++ "n" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" ""))))))))(re.union (str.to_re (seq.++ "f" (seq.++ "e" (seq.++ "b" (seq.++ "r" (seq.++ "u" (seq.++ "a" (seq.++ "r" (seq.++ "y" "")))))))))(re.union (str.to_re (seq.++ "m" (seq.++ "a" (seq.++ "r" (seq.++ "c" (seq.++ "h" ""))))))(re.union (str.to_re (seq.++ "a" (seq.++ "p" (seq.++ "r" (seq.++ "i" (seq.++ "l" ""))))))(re.union (str.to_re (seq.++ "m" (seq.++ "a" (seq.++ "y" ""))))(re.union (str.to_re (seq.++ "j" (seq.++ "u" (seq.++ "n" (seq.++ "e" "")))))(re.union (str.to_re (seq.++ "j" (seq.++ "u" (seq.++ "l" (seq.++ "y" "")))))(re.union (str.to_re (seq.++ "a" (seq.++ "u" (seq.++ "g" (seq.++ "u" (seq.++ "s" (seq.++ "t" "")))))))(re.union (str.to_re (seq.++ "s" (seq.++ "e" (seq.++ "p" (seq.++ "t" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))))(re.union (str.to_re (seq.++ "o" (seq.++ "c" (seq.++ "t" (seq.++ "o" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))(re.union (str.to_re (seq.++ "n" (seq.++ "o" (seq.++ "v" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))) (str.to_re (seq.++ "d" (seq.++ "e" (seq.++ "c" (seq.++ "e" (seq.++ "m" (seq.++ "b" (seq.++ "e" (seq.++ "r" ""))))))))))))))))))))(re.++ (re.* (re.range "," ","))(re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "")))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
