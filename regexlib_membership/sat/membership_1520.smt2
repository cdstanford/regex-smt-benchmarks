;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (&#192;|&#193;|&#194;|&#195;|&#196;|&#197;|&#224;|&#225;|&#226;|&#227;|&#228;|&#229;|&amp;#097;|&amp;#065;|&amp;#064;|&amp;commat;|&amp;alpha;|&amp;#192;|&amp;#193;|&amp;#194;|&amp;#195;|&amp;#196;|&amp;#197;|&amp;Agrave;|&amp;Aacute;|&amp;Acirc;|&amp;Atilde;|&amp;Auml;|&amp;Aring;|&amp;#224;|&amp;#225;|&amp;#226;|&amp;#227;|&amp;#228;|&amp;#229;|&amp;agrave;|&amp;aacute;|&amp;acirc;|&amp;atilde;|&amp;auml;|&amp;aring;)
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "&#195;[\u00C7"
(define-fun Witness1 () String (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "5" (seq.++ ";" (seq.++ "[" (seq.++ "\xc7" "")))))))))
;witness2: "\x1A&amp;aring;\u00DB"
(define-fun Witness2 () String (seq.++ "\x1a" (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "r" (seq.++ "i" (seq.++ "n" (seq.++ "g" (seq.++ ";" (seq.++ "\xdb" ""))))))))))))))

(assert (= regexA (re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "2" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "3" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "4" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "5" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "6" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "7" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "4" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "5" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "6" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "7" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "8" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "9" (seq.++ ";" "")))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "9" (seq.++ "7" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "6" (seq.++ "5" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "0" (seq.++ "6" (seq.++ "4" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "c" (seq.++ "o" (seq.++ "m" (seq.++ "m" (seq.++ "a" (seq.++ "t" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "l" (seq.++ "p" (seq.++ "h" (seq.++ "a" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "2" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "3" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "4" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "5" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "6" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "1" (seq.++ "9" (seq.++ "7" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "A" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "A" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "A" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "A" (seq.++ "t" (seq.++ "i" (seq.++ "l" (seq.++ "d" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "A" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "A" (seq.++ "r" (seq.++ "i" (seq.++ "n" (seq.++ "g" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "4" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "5" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "6" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "7" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "8" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "#" (seq.++ "2" (seq.++ "2" (seq.++ "9" (seq.++ ";" "")))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "g" (seq.++ "r" (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "a" (seq.++ "c" (seq.++ "u" (seq.++ "t" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "c" (seq.++ "i" (seq.++ "r" (seq.++ "c" (seq.++ ";" ""))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "t" (seq.++ "i" (seq.++ "l" (seq.++ "d" (seq.++ "e" (seq.++ ";" "")))))))))))))(re.union (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "u" (seq.++ "m" (seq.++ "l" (seq.++ ";" ""))))))))))) (str.to_re (seq.++ "&" (seq.++ "a" (seq.++ "m" (seq.++ "p" (seq.++ ";" (seq.++ "a" (seq.++ "r" (seq.++ "i" (seq.++ "n" (seq.++ "g" (seq.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
