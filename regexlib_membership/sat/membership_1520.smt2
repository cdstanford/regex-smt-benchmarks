;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (&#192;|&#193;|&#194;|&#195;|&#196;|&#197;|&#224;|&#225;|&#226;|&#227;|&#228;|&#229;|&amp;#097;|&amp;#065;|&amp;#064;|&amp;commat;|&amp;alpha;|&amp;#192;|&amp;#193;|&amp;#194;|&amp;#195;|&amp;#196;|&amp;#197;|&amp;Agrave;|&amp;Aacute;|&amp;Acirc;|&amp;Atilde;|&amp;Auml;|&amp;Aring;|&amp;#224;|&amp;#225;|&amp;#226;|&amp;#227;|&amp;#228;|&amp;#229;|&amp;agrave;|&amp;aacute;|&amp;acirc;|&amp;atilde;|&amp;auml;|&amp;aring;)
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "&#195;[\u00C7"
(define-fun Witness1 () String (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ ";" (str.++ "[" (str.++ "\u{c7}" "")))))))))
;witness2: "\x1A&amp;aring;\u00DB"
(define-fun Witness2 () String (str.++ "\u{1a}" (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ ";" (str.++ "\u{db}" ""))))))))))))))

(assert (= regexA (re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "4" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "5" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "6" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "7" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "8" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ ";" "")))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "9" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "6" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "0" (str.++ "6" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "c" (str.++ "o" (str.++ "m" (str.++ "m" (str.++ "a" (str.++ "t" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "l" (str.++ "p" (str.++ "h" (str.++ "a" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "2" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "3" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "1" (str.++ "9" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "A" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "4" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "5" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "6" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "7" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "8" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "#" (str.++ "2" (str.++ "2" (str.++ "9" (str.++ ";" "")))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "g" (str.++ "r" (str.++ "a" (str.++ "v" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "a" (str.++ "c" (str.++ "u" (str.++ "t" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "c" (str.++ "i" (str.++ "r" (str.++ "c" (str.++ ";" ""))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "t" (str.++ "i" (str.++ "l" (str.++ "d" (str.++ "e" (str.++ ";" "")))))))))))))(re.union (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "u" (str.++ "m" (str.++ "l" (str.++ ";" ""))))))))))) (str.to_re (str.++ "&" (str.++ "a" (str.++ "m" (str.++ "p" (str.++ ";" (str.++ "a" (str.++ "r" (str.++ "i" (str.++ "n" (str.++ "g" (str.++ ";" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
