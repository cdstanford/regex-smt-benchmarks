;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((unit|u|)\s*)?(?<unit>\d*\w?)?(\s+|/)?(?<streetNo>\d+(\-\d+)?)\s+(?<streetName>\w+)\s+(?<streetType>\w+)\s+(?<suburb>\w+(\s+\w+)?)\s+(?<state>\w+)\s+(?<postcode>\d{4})$
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "unit\u00A0\u00AA/9-9\xC\u0085\u00BA\xC\u0085\xA\u00A0\u00BA3\u00A0\u00A0\u0085\u00A0\u00A0\u0085\u00A0\u00A0\u0085\xA1\u00858L\u00AA\xB8669K8 3978"
(define-fun Witness1 () String (str.++ "u" (str.++ "n" (str.++ "i" (str.++ "t" (str.++ "\u{a0}" (str.++ "\u{aa}" (str.++ "/" (str.++ "9" (str.++ "-" (str.++ "9" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "\u{ba}" (str.++ "\u{0c}" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "\u{a0}" (str.++ "\u{ba}" (str.++ "3" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{0a}" (str.++ "1" (str.++ "\u{85}" (str.++ "8" (str.++ "L" (str.++ "\u{aa}" (str.++ "\u{0b}" (str.++ "8" (str.++ "6" (str.++ "6" (str.++ "9" (str.++ "K" (str.++ "8" (str.++ " " (str.++ "3" (str.++ "9" (str.++ "7" (str.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "u\u00A0\u00A0\u0085\u0085 \xC\xC084842-2\u00A0\u0085 \u00F64\u00F4\u0085555\u00A0 \u00C5\u00A0L  8808"
(define-fun Witness2 () String (str.++ "u" (str.++ "\u{a0}" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{0c}" (str.++ "\u{0c}" (str.++ "0" (str.++ "8" (str.++ "4" (str.++ "8" (str.++ "4" (str.++ "2" (str.++ "-" (str.++ "2" (str.++ "\u{a0}" (str.++ "\u{85}" (str.++ " " (str.++ "\u{f6}" (str.++ "4" (str.++ "\u{f4}" (str.++ "\u{85}" (str.++ "5" (str.++ "5" (str.++ "5" (str.++ "\u{a0}" (str.++ " " (str.++ "\u{c5}" (str.++ "\u{a0}" (str.++ "L" (str.++ " " (str.++ " " (str.++ "8" (str.++ "8" (str.++ "0" (str.++ "8" ""))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "u" (str.++ "n" (str.++ "i" (str.++ "t" "")))))(re.union (re.range "u" "u") (str.to_re ""))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.opt (re.++ (re.* (re.range "0" "9")) (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))))(re.++ (re.opt (re.union (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.range "/" "/")))(re.++ (re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") (re.+ (re.range "0" "9")))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))) (re.opt (re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.+ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
