;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^((unit|u|)\s*)?(?<unit>\d*\w?)?(\s+|/)?(?<streetNo>\d+(\-\d+)?)\s+(?<streetName>\w+)\s+(?<streetType>\w+)\s+(?<suburb>\w+(\s+\w+)?)\s+(?<state>\w+)\s+(?<postcode>\d{4})$
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "unit\u00A0\u00AA/9-9\xC\u0085\u00BA\xC\u0085\xA\u00A0\u00BA3\u00A0\u00A0\u0085\u00A0\u00A0\u0085\u00A0\u00A0\u0085\xA1\u00858L\u00AA\xB8669K8 3978"
(define-fun Witness1 () String (seq.++ "u" (seq.++ "n" (seq.++ "i" (seq.++ "t" (seq.++ "\xa0" (seq.++ "\xaa" (seq.++ "/" (seq.++ "9" (seq.++ "-" (seq.++ "9" (seq.++ "\x0c" (seq.++ "\x85" (seq.++ "\xba" (seq.++ "\x0c" (seq.++ "\x85" (seq.++ "\x0a" (seq.++ "\xa0" (seq.++ "\xba" (seq.++ "3" (seq.++ "\xa0" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "\xa0" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "\xa0" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "\x0a" (seq.++ "1" (seq.++ "\x85" (seq.++ "8" (seq.++ "L" (seq.++ "\xaa" (seq.++ "\x0b" (seq.++ "8" (seq.++ "6" (seq.++ "6" (seq.++ "9" (seq.++ "K" (seq.++ "8" (seq.++ " " (seq.++ "3" (seq.++ "9" (seq.++ "7" (seq.++ "8" "")))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "u\u00A0\u00A0\u0085\u0085 \xC\xC084842-2\u00A0\u0085 \u00F64\u00F4\u0085555\u00A0 \u00C5\u00A0L  8808"
(define-fun Witness2 () String (seq.++ "u" (seq.++ "\xa0" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ "\x85" (seq.++ " " (seq.++ "\x0c" (seq.++ "\x0c" (seq.++ "0" (seq.++ "8" (seq.++ "4" (seq.++ "8" (seq.++ "4" (seq.++ "2" (seq.++ "-" (seq.++ "2" (seq.++ "\xa0" (seq.++ "\x85" (seq.++ " " (seq.++ "\xf6" (seq.++ "4" (seq.++ "\xf4" (seq.++ "\x85" (seq.++ "5" (seq.++ "5" (seq.++ "5" (seq.++ "\xa0" (seq.++ " " (seq.++ "\xc5" (seq.++ "\xa0" (seq.++ "L" (seq.++ " " (seq.++ " " (seq.++ "8" (seq.++ "8" (seq.++ "0" (seq.++ "8" ""))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (str.to_re "")(re.++ (re.opt (re.++ (re.union (str.to_re (seq.++ "u" (seq.++ "n" (seq.++ "i" (seq.++ "t" "")))))(re.union (re.range "u" "u") (str.to_re ""))) (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))))(re.++ (re.opt (re.++ (re.* (re.range "0" "9")) (re.opt (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))))(re.++ (re.opt (re.union (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (re.range "/" "/")))(re.++ (re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (re.range "-" "-") (re.+ (re.range "0" "9")))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))) (re.opt (re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ (re.+ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.+ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
