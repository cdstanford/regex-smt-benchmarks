;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ((?<strPOBox>((POBox|PO\sBox)\s*\d*)),?\s?)?(((?<strUnit>([\w\d\s\,]*)),\s?)?( (?<strStreet>([\w\s\-]*\w\s(st\s)?[\w]*\s(street|st|road|rd|close|cl|avenue|ave|av|path|ph|drive|drv|LOOP|COURT|CT|CIRCLE|LANE|LN))  ),?\s?))?((?<strTown>([\p{Ll}\p{Lu}\p{Lo}\p{Pc}\p{Lt}\p{Lm}\s]*)),?\s?)?((?<strState>(Victoria|VIC|New South Wales|NSW|South Australia|SA|Northern Territory|NT|West Australia|WA|Tasmania|TAS|ACT|Queensland|QLD))\s*)?(?<strPostalCode>(\d{4}),?\s?)?(?<strCountry>(Australia))?
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "PO BoxVictoria\xC\u00AD"
(define-fun Witness1 () String (str.++ "P" (str.++ "O" (str.++ " " (str.++ "B" (str.++ "o" (str.++ "x" (str.++ "V" (str.++ "i" (str.++ "c" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "i" (str.++ "a" (str.++ "\u{0c}" (str.++ "\u{ad}" "")))))))))))))))))
;witness2: "POBox\xA9 \u00AAu\u0085st\x9bk6 path  ,\u00D6TAS"
(define-fun Witness2 () String (str.++ "P" (str.++ "O" (str.++ "B" (str.++ "o" (str.++ "x" (str.++ "\u{0a}" (str.++ "9" (str.++ " " (str.++ "\u{aa}" (str.++ "u" (str.++ "\u{85}" (str.++ "s" (str.++ "t" (str.++ "\u{09}" (str.++ "b" (str.++ "k" (str.++ "6" (str.++ " " (str.++ "p" (str.++ "a" (str.++ "t" (str.++ "h" (str.++ " " (str.++ " " (str.++ "," (str.++ "\u{d6}" (str.++ "T" (str.++ "A" (str.++ "S" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.++ (re.union (str.to_re (str.++ "P" (str.++ "O" (str.++ "B" (str.++ "o" (str.++ "x" "")))))) (re.++ (str.to_re (str.++ "P" (str.++ "O" "")))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (str.to_re (str.++ "B" (str.++ "o" (str.++ "x" "")))))))(re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))) (re.* (re.range "0" "9"))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.opt (re.++ (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.range "," ",") (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.++ (re.range " " " ")(re.++ (re.++ (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "s" (str.++ "t" ""))) (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}")))))))))))(re.++ (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))) (re.union (str.to_re (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "e" (str.++ "e" (str.++ "t" "")))))))(re.union (str.to_re (str.++ "s" (str.++ "t" "")))(re.union (str.to_re (str.++ "r" (str.++ "o" (str.++ "a" (str.++ "d" "")))))(re.union (str.to_re (str.++ "r" (str.++ "d" "")))(re.union (str.to_re (str.++ "c" (str.++ "l" (str.++ "o" (str.++ "s" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "c" (str.++ "l" "")))(re.union (str.to_re (str.++ "a" (str.++ "v" (str.++ "e" (str.++ "n" (str.++ "u" (str.++ "e" "")))))))(re.union (str.to_re (str.++ "a" (str.++ "v" (str.++ "e" ""))))(re.union (str.to_re (str.++ "a" (str.++ "v" "")))(re.union (str.to_re (str.++ "p" (str.++ "a" (str.++ "t" (str.++ "h" "")))))(re.union (str.to_re (str.++ "p" (str.++ "h" "")))(re.union (str.to_re (str.++ "d" (str.++ "r" (str.++ "i" (str.++ "v" (str.++ "e" ""))))))(re.union (str.to_re (str.++ "d" (str.++ "r" (str.++ "v" ""))))(re.union (str.to_re (str.++ "L" (str.++ "O" (str.++ "O" (str.++ "P" "")))))(re.union (str.to_re (str.++ "C" (str.++ "O" (str.++ "U" (str.++ "R" (str.++ "T" ""))))))(re.union (str.to_re (str.++ "C" (str.++ "T" "")))(re.union (str.to_re (str.++ "C" (str.++ "I" (str.++ "R" (str.++ "C" (str.++ "L" (str.++ "E" "")))))))(re.union (str.to_re (str.++ "L" (str.++ "A" (str.++ "N" (str.++ "E" ""))))) (str.to_re (str.++ "L" (str.++ "N" ""))))))))))))))))))))))))))) (str.to_re (str.++ " " (str.++ " " ""))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))))(re.++ (re.opt (re.++ (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\u{85}" "\u{85}")(re.union (re.range "\u{a0}" "\u{a0}")(re.union (re.range "\u{aa}" "\u{aa}")(re.union (re.range "\u{b5}" "\u{b5}")(re.union (re.range "\u{ba}" "\u{ba}")(re.union (re.range "\u{c0}" "\u{d6}")(re.union (re.range "\u{d8}" "\u{f6}") (re.range "\u{f8}" "\u{ff}"))))))))))))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))))(re.++ (re.opt (re.++ (re.union (str.to_re (str.++ "V" (str.++ "i" (str.++ "c" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "i" (str.++ "a" "")))))))))(re.union (str.to_re (str.++ "V" (str.++ "I" (str.++ "C" ""))))(re.union (str.to_re (str.++ "N" (str.++ "e" (str.++ "w" (str.++ " " (str.++ "S" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "h" (str.++ " " (str.++ "W" (str.++ "a" (str.++ "l" (str.++ "e" (str.++ "s" ""))))))))))))))))(re.union (str.to_re (str.++ "N" (str.++ "S" (str.++ "W" ""))))(re.union (str.to_re (str.++ "S" (str.++ "o" (str.++ "u" (str.++ "t" (str.++ "h" (str.++ " " (str.++ "A" (str.++ "u" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "a" ""))))))))))))))))(re.union (str.to_re (str.++ "S" (str.++ "A" "")))(re.union (str.to_re (str.++ "N" (str.++ "o" (str.++ "r" (str.++ "t" (str.++ "h" (str.++ "e" (str.++ "r" (str.++ "n" (str.++ " " (str.++ "T" (str.++ "e" (str.++ "r" (str.++ "r" (str.++ "i" (str.++ "t" (str.++ "o" (str.++ "r" (str.++ "y" "")))))))))))))))))))(re.union (str.to_re (str.++ "N" (str.++ "T" "")))(re.union (str.to_re (str.++ "W" (str.++ "e" (str.++ "s" (str.++ "t" (str.++ " " (str.++ "A" (str.++ "u" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "a" "")))))))))))))))(re.union (str.to_re (str.++ "W" (str.++ "A" "")))(re.union (str.to_re (str.++ "T" (str.++ "a" (str.++ "s" (str.++ "m" (str.++ "a" (str.++ "n" (str.++ "i" (str.++ "a" "")))))))))(re.union (str.to_re (str.++ "T" (str.++ "A" (str.++ "S" ""))))(re.union (str.to_re (str.++ "A" (str.++ "C" (str.++ "T" ""))))(re.union (str.to_re (str.++ "Q" (str.++ "u" (str.++ "e" (str.++ "e" (str.++ "n" (str.++ "s" (str.++ "l" (str.++ "a" (str.++ "n" (str.++ "d" ""))))))))))) (str.to_re (str.++ "Q" (str.++ "L" (str.++ "D" "")))))))))))))))))) (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))(re.++ (re.opt (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))))) (re.opt (str.to_re (str.++ "A" (str.++ "u" (str.++ "s" (str.++ "t" (str.++ "r" (str.++ "a" (str.++ "l" (str.++ "i" (str.++ "a" ""))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
