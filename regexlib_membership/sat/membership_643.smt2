;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ((?<strPOBox>((POBox|PO\sBox)\s*\d*)),?\s?)?(((?<strUnit>([\w\d\s\,]*)),\s?)?( (?<strStreet>([\w\s\-]*\w\s(st\s)?[\w]*\s(street|st|road|rd|close|cl|avenue|ave|av|path|ph|drive|drv|LOOP|COURT|CT|CIRCLE|LANE|LN))  ),?\s?))?((?<strTown>([\p{Ll}\p{Lu}\p{Lo}\p{Pc}\p{Lt}\p{Lm}\s]*)),?\s?)?((?<strState>(Victoria|VIC|New South Wales|NSW|South Australia|SA|Northern Territory|NT|West Australia|WA|Tasmania|TAS|ACT|Queensland|QLD))\s*)?(?<strPostalCode>(\d{4}),?\s?)?(?<strCountry>(Australia))?
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "PO BoxVictoria\xC\u00AD"
(define-fun Witness1 () String (seq.++ "P" (seq.++ "O" (seq.++ " " (seq.++ "B" (seq.++ "o" (seq.++ "x" (seq.++ "V" (seq.++ "i" (seq.++ "c" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "i" (seq.++ "a" (seq.++ "\x0c" (seq.++ "\xad" "")))))))))))))))))
;witness2: "POBox\xA9 \u00AAu\u0085st\x9bk6 path  ,\u00D6TAS"
(define-fun Witness2 () String (seq.++ "P" (seq.++ "O" (seq.++ "B" (seq.++ "o" (seq.++ "x" (seq.++ "\x0a" (seq.++ "9" (seq.++ " " (seq.++ "\xaa" (seq.++ "u" (seq.++ "\x85" (seq.++ "s" (seq.++ "t" (seq.++ "\x09" (seq.++ "b" (seq.++ "k" (seq.++ "6" (seq.++ " " (seq.++ "p" (seq.++ "a" (seq.++ "t" (seq.++ "h" (seq.++ " " (seq.++ " " (seq.++ "," (seq.++ "\xd6" (seq.++ "T" (seq.++ "A" (seq.++ "S" ""))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.opt (re.++ (re.++ (re.union (str.to_re (seq.++ "P" (seq.++ "O" (seq.++ "B" (seq.++ "o" (seq.++ "x" "")))))) (re.++ (str.to_re (seq.++ "P" (seq.++ "O" "")))(re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))) (str.to_re (seq.++ "B" (seq.++ "o" (seq.++ "x" "")))))))(re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))) (re.* (re.range "0" "9"))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))))))(re.++ (re.opt (re.++ (re.opt (re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "," ",")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\x85" "\x85")(re.union (re.range "\xa0" "\xa0")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))))))))(re.++ (re.range "," ",") (re.opt (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))))) (re.++ (re.range " " " ")(re.++ (re.++ (re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\x85" "\x85")(re.union (re.range "\xa0" "\xa0")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))))))))(re.++ (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))(re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))(re.++ (re.opt (re.++ (str.to_re (seq.++ "s" (seq.++ "t" ""))) (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))))(re.++ (re.* (re.union (re.range "0" "9")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff")))))))))))(re.++ (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))) (re.union (str.to_re (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "e" (seq.++ "e" (seq.++ "t" "")))))))(re.union (str.to_re (seq.++ "s" (seq.++ "t" "")))(re.union (str.to_re (seq.++ "r" (seq.++ "o" (seq.++ "a" (seq.++ "d" "")))))(re.union (str.to_re (seq.++ "r" (seq.++ "d" "")))(re.union (str.to_re (seq.++ "c" (seq.++ "l" (seq.++ "o" (seq.++ "s" (seq.++ "e" ""))))))(re.union (str.to_re (seq.++ "c" (seq.++ "l" "")))(re.union (str.to_re (seq.++ "a" (seq.++ "v" (seq.++ "e" (seq.++ "n" (seq.++ "u" (seq.++ "e" "")))))))(re.union (str.to_re (seq.++ "a" (seq.++ "v" (seq.++ "e" ""))))(re.union (str.to_re (seq.++ "a" (seq.++ "v" "")))(re.union (str.to_re (seq.++ "p" (seq.++ "a" (seq.++ "t" (seq.++ "h" "")))))(re.union (str.to_re (seq.++ "p" (seq.++ "h" "")))(re.union (str.to_re (seq.++ "d" (seq.++ "r" (seq.++ "i" (seq.++ "v" (seq.++ "e" ""))))))(re.union (str.to_re (seq.++ "d" (seq.++ "r" (seq.++ "v" ""))))(re.union (str.to_re (seq.++ "L" (seq.++ "O" (seq.++ "O" (seq.++ "P" "")))))(re.union (str.to_re (seq.++ "C" (seq.++ "O" (seq.++ "U" (seq.++ "R" (seq.++ "T" ""))))))(re.union (str.to_re (seq.++ "C" (seq.++ "T" "")))(re.union (str.to_re (seq.++ "C" (seq.++ "I" (seq.++ "R" (seq.++ "C" (seq.++ "L" (seq.++ "E" "")))))))(re.union (str.to_re (seq.++ "L" (seq.++ "A" (seq.++ "N" (seq.++ "E" ""))))) (str.to_re (seq.++ "L" (seq.++ "N" ""))))))))))))))))))))))))))) (str.to_re (seq.++ " " (seq.++ " " ""))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))))))))(re.++ (re.opt (re.++ (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "A" "Z")(re.union (re.range "_" "_")(re.union (re.range "a" "z")(re.union (re.range "\x85" "\x85")(re.union (re.range "\xa0" "\xa0")(re.union (re.range "\xaa" "\xaa")(re.union (re.range "\xb5" "\xb5")(re.union (re.range "\xba" "\xba")(re.union (re.range "\xc0" "\xd6")(re.union (re.range "\xd8" "\xf6") (re.range "\xf8" "\xff"))))))))))))))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0"))))))))(re.++ (re.opt (re.++ (re.union (str.to_re (seq.++ "V" (seq.++ "i" (seq.++ "c" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "i" (seq.++ "a" "")))))))))(re.union (str.to_re (seq.++ "V" (seq.++ "I" (seq.++ "C" ""))))(re.union (str.to_re (seq.++ "N" (seq.++ "e" (seq.++ "w" (seq.++ " " (seq.++ "S" (seq.++ "o" (seq.++ "u" (seq.++ "t" (seq.++ "h" (seq.++ " " (seq.++ "W" (seq.++ "a" (seq.++ "l" (seq.++ "e" (seq.++ "s" ""))))))))))))))))(re.union (str.to_re (seq.++ "N" (seq.++ "S" (seq.++ "W" ""))))(re.union (str.to_re (seq.++ "S" (seq.++ "o" (seq.++ "u" (seq.++ "t" (seq.++ "h" (seq.++ " " (seq.++ "A" (seq.++ "u" (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "a" ""))))))))))))))))(re.union (str.to_re (seq.++ "S" (seq.++ "A" "")))(re.union (str.to_re (seq.++ "N" (seq.++ "o" (seq.++ "r" (seq.++ "t" (seq.++ "h" (seq.++ "e" (seq.++ "r" (seq.++ "n" (seq.++ " " (seq.++ "T" (seq.++ "e" (seq.++ "r" (seq.++ "r" (seq.++ "i" (seq.++ "t" (seq.++ "o" (seq.++ "r" (seq.++ "y" "")))))))))))))))))))(re.union (str.to_re (seq.++ "N" (seq.++ "T" "")))(re.union (str.to_re (seq.++ "W" (seq.++ "e" (seq.++ "s" (seq.++ "t" (seq.++ " " (seq.++ "A" (seq.++ "u" (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "a" "")))))))))))))))(re.union (str.to_re (seq.++ "W" (seq.++ "A" "")))(re.union (str.to_re (seq.++ "T" (seq.++ "a" (seq.++ "s" (seq.++ "m" (seq.++ "a" (seq.++ "n" (seq.++ "i" (seq.++ "a" "")))))))))(re.union (str.to_re (seq.++ "T" (seq.++ "A" (seq.++ "S" ""))))(re.union (str.to_re (seq.++ "A" (seq.++ "C" (seq.++ "T" ""))))(re.union (str.to_re (seq.++ "Q" (seq.++ "u" (seq.++ "e" (seq.++ "e" (seq.++ "n" (seq.++ "s" (seq.++ "l" (seq.++ "a" (seq.++ "n" (seq.++ "d" ""))))))))))) (str.to_re (seq.++ "Q" (seq.++ "L" (seq.++ "D" "")))))))))))))))))) (re.* (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))))(re.++ (re.opt (re.++ ((_ re.loop 4 4) (re.range "0" "9"))(re.++ (re.opt (re.range "," ",")) (re.opt (re.union (re.range "\x09" "\x0d")(re.union (re.range " " " ")(re.union (re.range "\x85" "\x85") (re.range "\xa0" "\xa0")))))))) (re.opt (str.to_re (seq.++ "A" (seq.++ "u" (seq.++ "s" (seq.++ "t" (seq.++ "r" (seq.++ "a" (seq.++ "l" (seq.++ "i" (seq.++ "a" ""))))))))))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
