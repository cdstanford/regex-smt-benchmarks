;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ((EQD[^']*')(RFF[^']*'){0,9}(EQN[^']*')?(TMD[^']*'){0,9}(DTM[^']*'){0,9}(LOC[^']*'){0,9}(MEA[^']*'){0,9}(DIM[^']*'){0,9}(TMP[^']*'){0,9}(RNG[^']*'){0,9}(SEL[^']*'){0,9}(FTX[^']*'){0,9}(DGS[^']*'){0,9}(EQA[^']*'){0,9}(NAD[^']*')?)((TDT[^']*')(RFF[^']*'){0,9}(LOC[^']*'){0,9}(DTM[^']*'){0,9})?
;---
(set-info :status sat)
(set-option :print-success true)
(set-logic QF_BVRE)

(declare-const regexA (RegEx String))
(declare-const x String)

;witness1: "m\u00A6\u00E7\u00E8EQD\u00D4\'RFF\'RFF\'TMD\'TMD\u0094\'DTM\u008E\'LOC\'LOC\'MEA\u00D1\'DIM!\'TMP\'TMP\'RNGp\'RNG\'SEL\'FTXN\xF\u0099v\x1Co\'DGS\'DGS\'DGS\'EQA\xD\'EQA\'"
(define-fun Witness1 () String (seq.++ "m" (seq.++ "\xa6" (seq.++ "\xe7" (seq.++ "\xe8" (seq.++ "E" (seq.++ "Q" (seq.++ "D" (seq.++ "\xd4" (seq.++ "'" (seq.++ "R" (seq.++ "F" (seq.++ "F" (seq.++ "'" (seq.++ "R" (seq.++ "F" (seq.++ "F" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "D" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "D" (seq.++ "\x94" (seq.++ "'" (seq.++ "D" (seq.++ "T" (seq.++ "M" (seq.++ "\x8e" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "\xd1" (seq.++ "'" (seq.++ "D" (seq.++ "I" (seq.++ "M" (seq.++ "!" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "P" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "P" (seq.++ "'" (seq.++ "R" (seq.++ "N" (seq.++ "G" (seq.++ "p" (seq.++ "'" (seq.++ "R" (seq.++ "N" (seq.++ "G" (seq.++ "'" (seq.++ "S" (seq.++ "E" (seq.++ "L" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "N" (seq.++ "\x0f" (seq.++ "\x99" (seq.++ "v" (seq.++ "\x1c" (seq.++ "o" (seq.++ "'" (seq.++ "D" (seq.++ "G" (seq.++ "S" (seq.++ "'" (seq.++ "D" (seq.++ "G" (seq.++ "S" (seq.++ "'" (seq.++ "D" (seq.++ "G" (seq.++ "S" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "\x0d" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "'" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "EQD\'RFF\'RFF/K\'RFF\u00D7\'TMD\'TMD\'TMD\'DTM\'DTM\'DTM\'LOC\'LOC\u00C8W\'MEA\'DIM2\u00F1\'TMPa\u00B2W\'TMP\x17\u00A7\'RNG\'RNG\'SELJK\'SEL\'FTX\'FTX\u00D7\x7\'DGS(\'DGS\'DGS\'DGS\x0\'EQA\'"
(define-fun Witness2 () String (seq.++ "E" (seq.++ "Q" (seq.++ "D" (seq.++ "'" (seq.++ "R" (seq.++ "F" (seq.++ "F" (seq.++ "'" (seq.++ "R" (seq.++ "F" (seq.++ "F" (seq.++ "/" (seq.++ "K" (seq.++ "'" (seq.++ "R" (seq.++ "F" (seq.++ "F" (seq.++ "\xd7" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "D" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "D" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "D" (seq.++ "'" (seq.++ "D" (seq.++ "T" (seq.++ "M" (seq.++ "'" (seq.++ "D" (seq.++ "T" (seq.++ "M" (seq.++ "'" (seq.++ "D" (seq.++ "T" (seq.++ "M" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "'" (seq.++ "L" (seq.++ "O" (seq.++ "C" (seq.++ "\xc8" (seq.++ "W" (seq.++ "'" (seq.++ "M" (seq.++ "E" (seq.++ "A" (seq.++ "'" (seq.++ "D" (seq.++ "I" (seq.++ "M" (seq.++ "2" (seq.++ "\xf1" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "P" (seq.++ "a" (seq.++ "\xb2" (seq.++ "W" (seq.++ "'" (seq.++ "T" (seq.++ "M" (seq.++ "P" (seq.++ "\x17" (seq.++ "\xa7" (seq.++ "'" (seq.++ "R" (seq.++ "N" (seq.++ "G" (seq.++ "'" (seq.++ "R" (seq.++ "N" (seq.++ "G" (seq.++ "'" (seq.++ "S" (seq.++ "E" (seq.++ "L" (seq.++ "J" (seq.++ "K" (seq.++ "'" (seq.++ "S" (seq.++ "E" (seq.++ "L" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "'" (seq.++ "F" (seq.++ "T" (seq.++ "X" (seq.++ "\xd7" (seq.++ "\x07" (seq.++ "'" (seq.++ "D" (seq.++ "G" (seq.++ "S" (seq.++ "(" (seq.++ "'" (seq.++ "D" (seq.++ "G" (seq.++ "S" (seq.++ "'" (seq.++ "D" (seq.++ "G" (seq.++ "S" (seq.++ "'" (seq.++ "D" (seq.++ "G" (seq.++ "S" (seq.++ "\x00" (seq.++ "'" (seq.++ "E" (seq.++ "Q" (seq.++ "A" (seq.++ "'" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.++ (str.to_re (seq.++ "E" (seq.++ "Q" (seq.++ "D" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "R" (seq.++ "F" (seq.++ "F" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (seq.++ "E" (seq.++ "Q" (seq.++ "N" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "T" (seq.++ "M" (seq.++ "D" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "D" (seq.++ "T" (seq.++ "M" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "L" (seq.++ "O" (seq.++ "C" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "M" (seq.++ "E" (seq.++ "A" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "D" (seq.++ "I" (seq.++ "M" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "T" (seq.++ "M" (seq.++ "P" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "R" (seq.++ "N" (seq.++ "G" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "S" (seq.++ "E" (seq.++ "L" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "F" (seq.++ "T" (seq.++ "X" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "D" (seq.++ "G" (seq.++ "S" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "E" (seq.++ "Q" (seq.++ "A" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))) (re.opt (re.++ (str.to_re (seq.++ "N" (seq.++ "A" (seq.++ "D" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))))))))))))))))) (re.opt (re.++ (re.++ (str.to_re (seq.++ "T" (seq.++ "D" (seq.++ "T" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "R" (seq.++ "F" (seq.++ "F" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "L" (seq.++ "O" (seq.++ "C" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))) ((_ re.loop 0 9) (re.++ (str.to_re (seq.++ "D" (seq.++ "T" (seq.++ "M" ""))))(re.++ (re.* (re.union (re.range "\x00" "&") (re.range "(" "\xff"))) (re.range "'" "'")))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
