;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ((EQD[^']*')(RFF[^']*'){0,9}(EQN[^']*')?(TMD[^']*'){0,9}(DTM[^']*'){0,9}(LOC[^']*'){0,9}(MEA[^']*'){0,9}(DIM[^']*'){0,9}(TMP[^']*'){0,9}(RNG[^']*'){0,9}(SEL[^']*'){0,9}(FTX[^']*'){0,9}(DGS[^']*'){0,9}(EQA[^']*'){0,9}(NAD[^']*')?)((TDT[^']*')(RFF[^']*'){0,9}(LOC[^']*'){0,9}(DTM[^']*'){0,9})?
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "m\u00A6\u00E7\u00E8EQD\u00D4\'RFF\'RFF\'TMD\'TMD\u0094\'DTM\u008E\'LOC\'LOC\'MEA\u00D1\'DIM!\'TMP\'TMP\'RNGp\'RNG\'SEL\'FTXN\xF\u0099v\x1Co\'DGS\'DGS\'DGS\'EQA\xD\'EQA\'"
(define-fun Witness1 () String (str.++ "m" (str.++ "\u{a6}" (str.++ "\u{e7}" (str.++ "\u{e8}" (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "\u{d4}" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "\u{94}" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "\u{8e}" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "\u{d1}" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "!" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "p" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "'" (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "N" (str.++ "\u{0f}" (str.++ "\u{99}" (str.++ "v" (str.++ "\u{1c}" (str.++ "o" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "\u{0d}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" ""))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;witness2: "EQD\'RFF\'RFF/K\'RFF\u00D7\'TMD\'TMD\'TMD\'DTM\'DTM\'DTM\'LOC\'LOC\u00C8W\'MEA\'DIM2\u00F1\'TMPa\u00B2W\'TMP\x17\u00A7\'RNG\'RNG\'SELJK\'SEL\'FTX\'FTX\u00D7\x7\'DGS(\'DGS\'DGS\'DGS\x0\'EQA\'"
(define-fun Witness2 () String (str.++ "E" (str.++ "Q" (str.++ "D" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "/" (str.++ "K" (str.++ "'" (str.++ "R" (str.++ "F" (str.++ "F" (str.++ "\u{d7}" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "D" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "'" (str.++ "D" (str.++ "T" (str.++ "M" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "'" (str.++ "L" (str.++ "O" (str.++ "C" (str.++ "\u{c8}" (str.++ "W" (str.++ "'" (str.++ "M" (str.++ "E" (str.++ "A" (str.++ "'" (str.++ "D" (str.++ "I" (str.++ "M" (str.++ "2" (str.++ "\u{f1}" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "a" (str.++ "\u{b2}" (str.++ "W" (str.++ "'" (str.++ "T" (str.++ "M" (str.++ "P" (str.++ "\u{17}" (str.++ "\u{a7}" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "'" (str.++ "R" (str.++ "N" (str.++ "G" (str.++ "'" (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "J" (str.++ "K" (str.++ "'" (str.++ "S" (str.++ "E" (str.++ "L" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "'" (str.++ "F" (str.++ "T" (str.++ "X" (str.++ "\u{d7}" (str.++ "\u{07}" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "(" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "'" (str.++ "D" (str.++ "G" (str.++ "S" (str.++ "\u{00}" (str.++ "'" (str.++ "E" (str.++ "Q" (str.++ "A" (str.++ "'" "")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(assert (= regexA (re.++ (re.++ (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "R" (str.++ "F" (str.++ "F" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ (re.opt (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "N" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "T" (str.++ "M" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "T" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "M" (str.++ "E" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "I" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "T" (str.++ "M" (str.++ "P" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "R" (str.++ "N" (str.++ "G" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "S" (str.++ "E" (str.++ "L" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "F" (str.++ "T" (str.++ "X" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "G" (str.++ "S" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "E" (str.++ "Q" (str.++ "A" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))) (re.opt (re.++ (str.to_re (str.++ "N" (str.++ "A" (str.++ "D" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))))))))))))))))) (re.opt (re.++ (re.++ (str.to_re (str.++ "T" (str.++ "D" (str.++ "T" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "R" (str.++ "F" (str.++ "F" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'"))))(re.++ ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "L" (str.++ "O" (str.++ "C" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))) ((_ re.loop 0 9) (re.++ (str.to_re (str.++ "D" (str.++ "T" (str.++ "M" ""))))(re.++ (re.* (re.union (re.range "\u{00}" "&") (re.range "(" "\u{ff}"))) (re.range "'" "'")))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
