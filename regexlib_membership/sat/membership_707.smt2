;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = ^\((([2-7][0-9]{2})|(8(0[^0]|[^0]0|1\d|2[^2]|[^2]2|3[^3]|[^3]3|4[^4]|[^4]4|5[^5]|[^5]5|6[^6]|[^6]6|7[^7]|[^7]7|8[^8]|[^8]8|9\d){1})|(9(0[^0]|[^0]0|[1-9][1-9])))\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^(([2-7][0-9]{2})|(8(0[^0]|[^0]0|1\d|2[^2]|[^2]2|3[^3]|[^3]3|4[^4]|[^4]4|5[^5]|[^5]5|6[^6]|[^6]6|7[^7]|[^7]7|8[^8]|[^8]8|9\d){1})|(9(0[^0]|[^0]0|[1-9][1-9])))-?[0-9]{3}-?[0-9]{4}$
;---
(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "8\u00C07-2849379"
(define-fun Witness1 () String (str.++ "8" (str.++ "\u{c0}" (str.++ "7" (str.++ "-" (str.++ "2" (str.++ "8" (str.++ "4" (str.++ "9" (str.++ "3" (str.++ "7" (str.++ "9" ""))))))))))))
;witness2: "(819)991\x96982"
(define-fun Witness2 () String (str.++ "(" (str.++ "8" (str.++ "1" (str.++ "9" (str.++ ")" (str.++ "9" (str.++ "9" (str.++ "1" (str.++ "\u{09}" (str.++ "6" (str.++ "9" (str.++ "8" (str.++ "2" ""))))))))))))))

(assert (= regexA (re.union (re.++ (str.to_re "")(re.++ (re.range "(" "(")(re.++ (re.union (re.++ (re.range "2" "7") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "8" "8") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")) (re.range "2" "2"))(re.union (re.++ (re.range "3" "3") (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")) (re.range "3" "3"))(re.union (re.++ (re.range "4" "4") (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")) (re.range "4" "4"))(re.union (re.++ (re.range "5" "5") (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")) (re.range "5" "5"))(re.union (re.++ (re.range "6" "6") (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")) (re.range "6" "6"))(re.union (re.++ (re.range "7" "7") (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")) (re.range "7" "7"))(re.union (re.++ (re.range "8" "8") (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")) (re.range "8" "8")) (re.++ (re.range "9" "9") (re.range "0" "9")))))))))))))))))))) (re.++ (re.range "9" "9") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0")) (re.++ (re.range "1" "9") (re.range "1" "9")))))))(re.++ (re.range ")" ")")(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "-" "-")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}"))))))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))) (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "2" "7") ((_ re.loop 2 2) (re.range "0" "9")))(re.union (re.++ (re.range "8" "8") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0"))(re.union (re.++ (re.range "1" "1") (re.range "0" "9"))(re.union (re.++ (re.range "2" "2") (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "1") (re.range "3" "\u{ff}")) (re.range "2" "2"))(re.union (re.++ (re.range "3" "3") (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "2") (re.range "4" "\u{ff}")) (re.range "3" "3"))(re.union (re.++ (re.range "4" "4") (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "3") (re.range "5" "\u{ff}")) (re.range "4" "4"))(re.union (re.++ (re.range "5" "5") (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "4") (re.range "6" "\u{ff}")) (re.range "5" "5"))(re.union (re.++ (re.range "6" "6") (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "5") (re.range "7" "\u{ff}")) (re.range "6" "6"))(re.union (re.++ (re.range "7" "7") (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "6") (re.range "8" "\u{ff}")) (re.range "7" "7"))(re.union (re.++ (re.range "8" "8") (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "7") (re.range "9" "\u{ff}")) (re.range "8" "8")) (re.++ (re.range "9" "9") (re.range "0" "9")))))))))))))))))))) (re.++ (re.range "9" "9") (re.union (re.++ (re.range "0" "0") (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")))(re.union (re.++ (re.union (re.range "\u{00}" "/") (re.range "1" "\u{ff}")) (re.range "0" "0")) (re.++ (re.range "1" "9") (re.range "1" "9")))))))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 3 3) (re.range "0" "9"))(re.++ (re.opt (re.range "-" "-"))(re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re ""))))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
