;---
; using 8-bit bit-vectors as characters
; check membership of .Net regex
; regexA = (((^[BEGLMNS][1-9]\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\d\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\s?0AA$)
;---
;(set-info :status sat)
;(set-option :print-success true)
(set-logic QF_S)

(declare-const regexA RegLan)
(declare-const x String)

;witness1: "UB839QB"
(define-fun Witness1 () String (str.++ "U" (str.++ "B" (str.++ "8" (str.++ "3" (str.++ "9" (str.++ "Q" (str.++ "B" ""))))))))
;witness2: "JE829AU"
(define-fun Witness2 () String (str.++ "J" (str.++ "E" (str.++ "8" (str.++ "2" (str.++ "9" (str.++ "A" (str.++ "U" ""))))))))

(assert (= regexA (re.union (re.++ (re.++ (re.union (re.++ (str.to_re "")(re.++ (re.union (re.range "B" "B")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "L" "N") (re.range "S" "S")))))(re.++ (re.range "1" "9") (re.opt (re.range "0" "9")))))(re.union (re.++ (str.to_re "")(re.++ (re.range "W" "W") (re.range "2" "9")))(re.union (re.++ (str.to_re "")(re.++ (re.union (re.++ (re.range "A" "A") (re.union (re.range "B" "B") (re.range "L" "L")))(re.union (re.++ (re.range "B" "B") (re.union (re.range "A" "B")(re.union (re.range "D" "D")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N") (re.range "R" "T")))))))(re.union (re.++ (re.range "C" "C") (re.union (re.range "A" "B")(re.union (re.range "F" "F")(re.union (re.range "H" "H")(re.union (re.range "M" "M")(re.union (re.range "O" "O")(re.union (re.range "R" "R")(re.union (re.range "T" "T") (re.range "V" "W")))))))))(re.union (re.++ (re.range "D" "D") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "G" "H")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "T" "T") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "E" "E") (re.union (re.range "H" "H")(re.union (re.range "N" "N") (re.range "X" "X"))))(re.union (re.++ (re.range "F" "F") (re.union (re.range "K" "K") (re.range "Y" "Y")))(re.union (re.++ (re.range "G" "G") (re.union (re.range "L" "L")(re.union (re.range "U" "U") (re.range "Y" "Y"))))(re.union (re.++ (re.range "H" "H") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "G" "G")(re.union (re.range "P" "P")(re.union (re.range "R" "S")(re.union (re.range "U" "U") (re.range "X" "X"))))))))(re.union (re.++ (re.range "I" "I") (re.union (re.range "G" "G")(re.union (re.range "M" "M")(re.union (re.range "P" "P") (re.range "V" "V")))))(re.union (str.to_re (str.++ "J" (str.++ "E" "")))(re.union (re.++ (re.range "K" "K") (re.union (re.range "A" "A")(re.union (re.range "T" "T")(re.union (re.range "W" "W") (re.range "Y" "Y")))))(re.union (re.++ (re.range "L" "L") (re.union (re.range "A" "A")(re.union (re.range "D" "E")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "S" "S") (re.range "U" "U")))))))(re.union (re.++ (re.range "M" "M") (re.union (re.range "E" "E") (re.range "K" "L")))(re.union (re.++ (re.range "N" "N") (re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "N" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "W" "W")))))))(re.union (re.++ (re.range "O" "O") (re.union (re.range "L" "L") (re.range "X" "X")))(re.union (re.++ (re.range "P" "P") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "L" "L")(re.union (re.range "O" "O") (re.range "R" "R")))))))(re.union (re.++ (re.range "R" "R") (re.union (re.range "G" "H") (re.range "M" "M")))(re.union (re.++ (re.range "S" "S") (re.union (re.range "A" "A")(re.union (re.range "E" "E")(re.union (re.range "G" "G")(re.union (re.range "K" "P")(re.union (re.range "R" "T")(re.union (re.range "W" "W") (re.range "Y" "Y"))))))))(re.union (re.++ (re.range "T" "T") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "Q" "S") (re.range "W" "W")))))))(re.union (str.to_re (str.++ "U" (str.++ "B" "")))(re.union (re.++ (re.range "W" "W") (re.union (re.range "A" "A")(re.union (re.range "D" "D")(re.union (re.range "F" "F")(re.union (re.range "N" "N")(re.union (re.range "R" "S") (re.range "V" "V")))))))(re.union (str.to_re (str.++ "Y" (str.++ "O" ""))) (str.to_re (str.++ "Z" (str.++ "E" "")))))))))))))))))))))))))(re.++ (re.range "0" "9") (re.opt (re.range "0" "9")))))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "W" (str.++ "1" ""))) (re.union (re.range "0" "9")(re.union (re.range "A" "H")(re.union (re.range "J" "K")(re.union (re.range "S" "U") (re.range "W" "W"))))))) (re.++ (re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "W" (str.++ "C" ""))) (re.range "1" "2")))(re.union (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "E" (str.++ "C" ""))) (re.range "1" "4"))) (re.++ (str.to_re "") (str.to_re (str.++ "S" (str.++ "W" (str.++ "1" ""))))))) (re.union (re.range "A" "B")(re.union (re.range "E" "E")(re.union (re.range "H" "H")(re.union (re.range "M" "N")(re.union (re.range "P" "P")(re.union (re.range "R" "R") (re.range "V" "Y"))))))))))))(re.++ (re.opt (re.* (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))) (re.++ (re.range "0" "9") ((_ re.loop 2 2) (re.union (re.range "A" "B")(re.union (re.range "D" "H")(re.union (re.range "J" "J")(re.union (re.range "L" "L")(re.union (re.range "N" "N")(re.union (re.range "P" "U") (re.range "W" "Z"))))))))))) (str.to_re "")) (re.++ (str.to_re "")(re.++ (str.to_re (str.++ "G" (str.++ "I" (str.++ "R" ""))))(re.++ (re.opt (re.union (re.range "\u{09}" "\u{0d}")(re.union (re.range " " " ")(re.union (re.range "\u{85}" "\u{85}") (re.range "\u{a0}" "\u{a0}")))))(re.++ (str.to_re (str.++ "0" (str.++ "A" (str.++ "A" "")))) (str.to_re ""))))))))

;check that the regex contains some x
(assert (str.in_re x regexA))
;check also the concrete witnesses
(assert (str.in_re Witness1 regexA))
(assert (str.in_re Witness2 regexA))
(check-sat)
